#include "core_gpio.h"  /* For getting GPIO read/write functions */
#include "core_uart_apb.h"
#include "socDefs.h"
#include "hal.h"

#include "Top_Level_hw_platform.h"

#include "cli.h"
#include "brt.h"


uint32_t user_input = 0;
uint8_t current_rt_subaddr= BRT_RX_SA1;
uint8_t current_sub_addr;
uint8_t last_msg_no;
uint8_t  temp;

#define CHAR_LINE_FEED         13
#define CHAR_ESC               27


void display_help(void){
	uint8_t tx_data[24][40] = {

	      {"\r\nR Read BRT Register  		   "},
	      {"\r\nM Modify  BRT TX Buffer 		   "},
	      {"\r\nD Display BRT  TX/RX Buffer Data"},
	      {"\r\nB Display BC messages        "},
	      {"\r\nX Start BRM BC               "},
	      {"\r\nC Change the BRT Address(Default:0x4 "},
	      {"\r\nN change the BC Data values   "},
	      {"\r\nH Display This Menu        \r\n"}
	 };

	      UART_send(&g_stdio_uart, tx_data[0],sizeof(tx_data));


}

/* Display the Prompt for the User Interaction */

void display_prompt(void) {

	dp_display_text("\r\nCore1553BRT>");


}

/* Decode the Key pressed by the User to select the Apropriate Action */

uint8_t get_key_selection(void)
{

      uint8_t rx_data[2];
      uint8_t rx_size =0;


           do {
               rx_size = UART_get_rx(&g_stdio_uart, &rx_data[1],1);
           }while(rx_size == 0);

           key = rx_data[1];
           //dp_display_text("\n\r Selected fuction is: ");
           UART_send (&g_stdio_uart, &key,sizeof (key));
           return rx_data[1];

    }


/* This function reads the user input such as address and data required for any
 * memory read/write operation
 *
 *  */
		void read_user_input (uint8_t *rx_char_ptr)
		{
		    uint8_t recv_char=0;
		    uint8_t size=0;
		    uint8_t index = 0;
		    for(index = 0; index < 10; index++)
		    {
		    	rx_char[index] = '0';
		    }
		    index = 0;
		    while(recv_char != CHAR_LINE_FEED)  //'\n'
		    {
		      size = UART_get_rx(&g_stdio_uart, &recv_char,1);
			  if(size > 0)
			  {

				  rx_char_ptr[index] = recv_char;
				  UART_send (&g_stdio_uart, (uint8_t *)&recv_char,sizeof(recv_char));
				  index++;
				  size = 0; // clear the rcvd flag
			  }
			}

		}

/* Display the contents of BRT Control and Status Registers
 * These are located at offset 0x1f80
 * Total number of registers 32
 */

void display_brt_regs(void){

			 uint32_t  mem_addr,mem_data;
			 //uint32_t   bc_reg[16];
			 uint8   i;
			mem_addr  = ( APB3_BASE_ADDRESS + CORE1553BRT_0) + BRT_REG_OFFSET ;  // base address of BRT instance, 32location from here onwards

			 dp_display_text("\n\r BRT Register Contents\r\n ");
			 for ( i=0; i<= 32 ;i++) {
			   dp_display_text("\r\n");
			   dp_display_value(i,DEC);
			   dp_display_text("\t");
			   dp_display_value(mem_addr,HEX);
			   dp_display_text("\t");
			   mem_data = HW_get_16bit_reg(mem_addr);
			   dp_display_value(mem_data,HEX);
			   mem_addr = mem_addr++;
			 }
		 }



/* Display Contents of BRT Sub addresses.
 *
 *
 * */

void display_brt_data(uint32_t brt_baseaddr,uint8_t subaddr){

			 uint16_t   mem_addr,mem_data;
			 uint16_t   tx_sub_address,rx_sub_address;

			 uint8_t   i,m;

			 mem_addr  = (APB3_BASE_ADDRESS +  brt_baseaddr);  // 16 location from here onwards

			 rx_sub_address = mem_addr + (BRT_RX_SA1 * subaddr);   //0x1080
			 tx_sub_address = rx_sub_address + BRT_RX_TX_ADDR_OFSET;

			 dp_display_text("\n\r BRT SA");
			 dp_display_value(subaddr,DEC);
			 dp_display_text("   RX Buffer\r\n");

			 for ( i=1; i <= 4 ;i++) {
				dp_display_text("\r\n");
				dp_display_value(i,DEC);
				dp_display_text("\t");
				dp_display_value(rx_sub_address ,HEX);// ( 8* i) for calculating current address of the total 32 location
				dp_display_text("\t");

				for (m=1; m <=8 ;m++){

				  mem_data= HW_get_16bit_reg(rx_sub_address);
				 dp_display_value(mem_data,HEX);
				 dp_display_text("\t");
				 rx_sub_address = rx_sub_address + 1;
				}

			 }


			 dp_display_text("\n\r BRT SA");
			 dp_display_value(subaddr,DEC);
			 dp_display_text("  TX Buffer\r\n");

			 			 for ( i=1; i <= 4 ;i++) {
			 				dp_display_text("\r\n");
			 				dp_display_value(i,DEC);
			 				dp_display_text("\t");
			 				dp_display_value(tx_sub_address,HEX);
			 				dp_display_text("\t");

			 				for (m=1; m <=8 ;m++){

			 				  mem_data= HW_get_16bit_reg(tx_sub_address);
			 				 dp_display_value(mem_data,HEX);
			 				 dp_display_text("\t");
			 				tx_sub_address = tx_sub_address + 1;
			 				}

			 			 }

		 }




/*  Process the User Input Selection and display teh Relevent data */


void process_uart_data(uint8_t key)
		   {
			   switch(key)
		       {

				   case 'R' : case 'r':
			   	   {
			   			//print_registers();
			   		display_brt_regs();



			   		break;
			   	   }



				   case 'H': case 'h':
				  	    {

				   		display_help();
                        break;
				  	    }

				   case 'D': case 'd':
					   {

						   current_sub_addr = validate_brt_sa_input();
						    if ( current_sub_addr > 0) {   // 0 mean esc from current operation
                        	    display_brt_data(CORE1553BRT_0 ,current_sub_addr);
						    }
							break;

					   }

                   /*
				   case 'M': case 'm':
				  					   {

				  						   while (1) {
				  						   				   			dp_display_text("Sub Address #(1 to 30): ");
				  						   				   			rx_char_ptr = rx_char;
				  						   				   		    read_user_input(rx_char_ptr);
				  						   				   			 xatoi ( &rx_char_ptr, &user_input);
				  						   				   			dp_display_value(user_input,HEX);

				  						   				   			if ((user_input > 0 ) && (user_input < 33))
				  						   				   		        {
				  						   				   				last_sub_address   = user_input;
				  						   				   				change_rt_data(RT_BASE_ADDR ,last_sub_address);
				  						   				   				 break;

				  						     				   			    } else {

				  						     				   			   dp_display_text("\r\n\Invaid input !!!!! Enter the Sub Address # ( 0 to 31)to display Data: ");

				  						     				   			    }

				  						   				   		}
				  						   break;
				  					   }

*/



				   default:  /* If selected key is out of range */
				   {

					   break;
				   }
		       }


			   display_prompt();

		   }



/*  this is test program */
void display_mem_data(void){

			 uint16_t   mem_addr,mem_data;
			 uint16_t   tx_sub_address,rx_sub_address;


			 uint8_t   i,m;

			 mem_addr  = (APB3_BASE_ADDRESS +  COREAPBSRAM_0);  // 16 location from here onwards

			 rx_sub_address = mem_addr;   //0x1080
			 tx_sub_address = mem_addr;
			 mem_data   = 0x0000;

			 dp_display_text("\n\r MEMORY FiLLING WIETH FOLLOWING DATA ");
			// dp_display_value(subaddr,DEC);
			// dp_display_text("   RX Buffer\r\n");

			 for ( i=0; i <= 3 ;i++) {
				dp_display_text("\r\n");
				dp_display_value(i,DEC);
				dp_display_text("\t");
				dp_display_value(rx_sub_address,HEX);// ( 8* i) for calculating current address of the total 32 location
				dp_display_text("\t");

				for (m=1; m <=8 ;m++){

				  HW_set_16bit_reg(rx_sub_address,mem_data);
				 dp_display_value(mem_data,HEX);
				 dp_display_text("\t");
				 rx_sub_address = rx_sub_address + 1;
				 mem_data = mem_data + 4;
				}

			 }


			 dp_display_text("\n\r Reading back the data from the same location");
			// dp_display_value(subaddr,DEC);
			// dp_display_text("  TX Buffer\r\n");

			 			 for ( i=0; i <= 3 ;i++) {
			 				dp_display_text("\r\n");
			 				dp_display_value(i,DEC);
			 				dp_display_text("\t");
			 				dp_display_value(tx_sub_address,HEX);
			 				dp_display_text("\t");

			 				for (m=1; m <=8 ;m++){

			 				  mem_data= HW_get_16bit_reg(tx_sub_address);
			 				 dp_display_value(mem_data,HEX);
			 				 dp_display_text("\t");
			 				tx_sub_address = tx_sub_address + 1;
			 				}

			 			 }

		 }


/* This functions gets a user input from terminal and display the memory data for the correspendign SA */
void  display_brt_sa ( void) {
	  uint8_t  subaddr;

							while (1) {
							dp_display_text("Sub Address #(1 to 31 ): ");
							rx_char_ptr = rx_char;
							read_user_input(rx_char_ptr);
							xatoi ( &rx_char_ptr, &subaddr);
							dp_display_text("\r\nInput recived :  ");
							dp_display_value(subaddr,HEX);

							if ((subaddr > 0 ) && (subaddr < 32))
								{

								display_brt_data(CORE1553BRT_0 ,subaddr);

								 break;

								}
							   else {

								   dp_display_text("\r\n\Invaid input !!!!! Enter the Sub Address # ( 1 to 31)to display Data: ");

									}

						   }


}


/* This function will get teh Input from Terminal and check for valid input for the SA */
uint8_t  validate_brt_sa_input ( void) {
	uint8_t  subaddr;


	dp_display_text("Sub Address #(1 to 31 ): ");
	rx_char_ptr = rx_char;
	read_user_input(rx_char_ptr);
	xatoi ( &rx_char_ptr, &subaddr);
	dp_display_value(subaddr,HEX);


	 if  ((subaddr > 0 ) && (subaddr < 32))
		{
		   return subaddr;  //display_brt_data(CORE1553BRT_0 ,subaddr);

		}
	   else
	   {
	      dp_display_text("\r\n\Invaid input !!!!! Enter the Sub Address # ( 1 to 31)to display Data: ");
	      return 0;

		}




}





/* This Function displays the Data at teh specified memory Location *
 * You can modify the data if you wish */



void change_rt_data(uint16_t rt_adress,uint8_t sub_addr){

 uint16_t   mem_addr,mem_data;
 uint16_t   tx_sub_addr;
 uint16_t   rx_sub_addr;

 uint8_t recv_char,size, index = 0;
 uint16_t input_data;

 uint8_t   i=0;
 uint8_t   m=0;

 /* Clear the buffer before getting any new data */
 for(index = 0; index < 10; index++)
			{
				rx_char[index] = '0';
			}
index = 0;


 mem_addr  = rt_adress;  // 16 location from here onwards

 rx_sub_addr = rt_adress + (BRT_RX_SA1 * sub_addr);   //0x1080
 tx_sub_addr = rx_sub_addr + BRT_RX_TX_ADDR_OFSET;

 dp_display_text("\n\r BRT SA");
 dp_display_value(sub_addr,DEC);
 dp_display_text("   Enter New data ( eg: 0x10fe ,  1234, 0b1010110) followed by return key  \r\n");

 for ( i=0; i <= 31 ;i++) {
	dp_display_text("\r\n");
	dp_display_value(i,DEC);
	dp_display_text("\t");
	dp_display_value(tx_sub_addr,HEX);
	dp_display_text(":");
	mem_data= HW_get_16bit_reg(tx_sub_addr);
	dp_display_value(mem_data,HEX);
	dp_display_text("->");
	key = get_key_selection();
	if ( key == CHAR_ESC){  // ESC key == exit from writing
		return;
	}else if ( key == CHAR_LINE_FEED) // Return key, move to next address
	{
	  tx_sub_addr = tx_sub_addr + 1;
	} else

	{
		rx_char[0] = key;  // put the previosly rxvd character to buffer;

		index = 1;
					while(recv_char != 13)  //'\n'
					{
					  size = UART_get_rx(&g_stdio_uart, &recv_char,1);
					  if(size > 0)
					  {

						  rx_char[index] = recv_char;
						  UART_send (&g_stdio_uart, (unsigned char *)&recv_char,sizeof(recv_char));
						  index++;
						  size = 0; // clear the rcvd flag
					  }
					}

					rx_char_ptr = rx_char;
					xatoi ( &rx_char_ptr, &input_data);
					HW_set_16bit_reg(tx_sub_addr,input_data);
					tx_sub_addr = tx_sub_addr + 1;
					recv_char = '-';  // DUMMY VALUE TO CHANGE THE DETECTION OF NEW LINE CHAR

	}


	}

 }
