                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.3 #4543 (Dec 31 2006)
                              4 ; This file generated Wed May 04 09:59:00 2016
                              5 ;--------------------------------------------------------
                              6 	.module ___main_org
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _g_wd
                             14 	.globl _g_stdio_uart
                             15 	.globl _g_gpio
                             16 	.globl _rx_char_ptr
                             17 	.globl _rx_char
                             18 	.globl _key
                             19 	.globl _wait
                             20 ;--------------------------------------------------------
                             21 ; special function registers
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (DATA)
                             24 ;--------------------------------------------------------
                             25 ; special function bits
                             26 ;--------------------------------------------------------
                             27 	.area RSEG    (DATA)
                             28 ;--------------------------------------------------------
                             29 ; overlayable register banks
                             30 ;--------------------------------------------------------
                             31 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      32 	.ds 8
                             33 ;--------------------------------------------------------
                             34 ; internal ram data
                             35 ;--------------------------------------------------------
                             36 	.area DSEG    (DATA)
                             37 ;--------------------------------------------------------
                             38 ; overlayable items in internal ram 
                             39 ;--------------------------------------------------------
                             40 	.area OSEG    (OVR,DATA)
                             41 ;--------------------------------------------------------
                             42 ; Stack segment in internal ram 
                             43 ;--------------------------------------------------------
                             44 	.area	SSEG	(DATA)
   0000                      45 __start__stack:
   0000                      46 	.ds	1
                             47 
                             48 ;--------------------------------------------------------
                             49 ; indirectly addressable internal ram data
                             50 ;--------------------------------------------------------
                             51 	.area ISEG    (DATA)
                             52 ;--------------------------------------------------------
                             53 ; absolute internal ram data
                             54 ;--------------------------------------------------------
                             55 	.area IABS    (ABS,DATA)
                             56 	.area IABS    (ABS,DATA)
                             57 ;--------------------------------------------------------
                             58 ; bit data
                             59 ;--------------------------------------------------------
                             60 	.area BSEG    (BIT)
                             61 ;--------------------------------------------------------
                             62 ; paged external ram data
                             63 ;--------------------------------------------------------
                             64 	.area PSEG    (PAG,XDATA)
                             65 ;--------------------------------------------------------
                             66 ; external ram data
                             67 ;--------------------------------------------------------
                             68 	.area XSEG    (XDATA)
                    0000     69 G$key$0$0==.
   0000                      70 _key::
   0000                      71 	.ds 1
                    0001     72 G$rx_char$0$0==.
   0001                      73 _rx_char::
   0001                      74 	.ds 10
                    000B     75 G$rx_char_ptr$0$0==.
   000B                      76 _rx_char_ptr::
   000B                      77 	.ds 3
                    000E     78 G$g_gpio$0$0==.
   000E                      79 _g_gpio::
   000E                      80 	.ds 3
                    0011     81 G$g_stdio_uart$0$0==.
   0011                      82 _g_stdio_uart::
   0011                      83 	.ds 3
                    0014     84 G$g_wd$0$0==.
   0014                      85 _g_wd::
   0014                      86 	.ds 2
                    0016     87 Lmain$uart_msg$1$1==.
   0016                      88 _main_uart_msg_1_1:
   0016                      89 	.ds 31
                    0035     90 Lmain$linefeed$1$1==.
   0035                      91 _main_linefeed_1_1:
   0035                      92 	.ds 3
                    0038     93 Lmain$sram_addr$1$1==.
   0038                      94 _main_sram_addr_1_1:
   0038                      95 	.ds 2
                    003A     96 Lmain$rx_data$2$4==.
   003A                      97 _main_rx_data_2_4:
   003A                      98 	.ds 2
                    003C     99 Lwait$time_in_ms$1$1==.
   003C                     100 _wait_time_in_ms_1_1:
   003C                     101 	.ds 2
                    003E    102 Lwait$i$1$1==.
   003E                     103 _wait_i_1_1:
   003E                     104 	.ds 2
                            105 ;--------------------------------------------------------
                            106 ; external initialized ram data
                            107 ;--------------------------------------------------------
                            108 	.area XISEG   (XDATA)
                            109 	.area HOME    (CODE)
                            110 	.area GSINIT0 (CODE)
                            111 	.area GSINIT1 (CODE)
                            112 	.area GSINIT2 (CODE)
                            113 	.area GSINIT3 (CODE)
                            114 	.area GSINIT4 (CODE)
                            115 	.area GSINIT5 (CODE)
                            116 	.area GSINIT  (CODE)
                            117 	.area GSFINAL (CODE)
                            118 	.area CSEG    (CODE)
                            119 ;--------------------------------------------------------
                            120 ; interrupt vector 
                            121 ;--------------------------------------------------------
                            122 	.area HOME    (CODE)
   0000                     123 __interrupt_vect:
   0000 02s00r00            124 	ljmp	__sdcc_gsinit_startup
                            125 ;--------------------------------------------------------
                            126 ; global & static initialisations
                            127 ;--------------------------------------------------------
                            128 	.area HOME    (CODE)
                            129 	.area GSINIT  (CODE)
                            130 	.area GSFINAL (CODE)
                            131 	.area GSINIT  (CODE)
                            132 	.globl __sdcc_gsinit_startup
                            133 	.globl __sdcc_program_startup
                            134 	.globl __start__stack
                            135 	.globl __mcs51_genXINIT
                            136 	.globl __mcs51_genXRAMCLEAR
                            137 	.globl __mcs51_genRAMCLEAR
                            138 	.area GSFINAL (CODE)
   0000 02s00r03            139 	ljmp	__sdcc_program_startup
                            140 ;--------------------------------------------------------
                            141 ; Home
                            142 ;--------------------------------------------------------
                            143 	.area HOME    (CODE)
                            144 	.area HOME    (CODE)
   0003                     145 __sdcc_program_startup:
   0003 12s00r00            146 	lcall	_main
                            147 ;	return from main will lock up
   0006 80 FE               148 	sjmp .
                            149 ;--------------------------------------------------------
                            150 ; code
                            151 ;--------------------------------------------------------
                            152 	.area CSEG    (CODE)
                            153 ;------------------------------------------------------------
                            154 ;Allocation info for local variables in function 'main'
                            155 ;------------------------------------------------------------
                            156 ;uart_msg                  Allocated with name '_main_uart_msg_1_1'
                            157 ;linefeed                  Allocated with name '_main_linefeed_1_1'
                            158 ;value                     Allocated with name '_main_value_1_1'
                            159 ;testvar                   Allocated with name '_main_testvar_1_1'
                            160 ;sram_addr                 Allocated with name '_main_sram_addr_1_1'
                            161 ;rx_data                   Allocated with name '_main_rx_data_2_4'
                            162 ;rx_size                   Allocated with name '_main_rx_size_2_4'
                            163 ;------------------------------------------------------------
                    0000    164 	G$main$0$0 ==.
                    0000    165 	C$main_org.c$55$0$0 ==.
                            166 ;	../main_org.c:55: int main( void )
                            167 ;	-----------------------------------------
                            168 ;	 function main
                            169 ;	-----------------------------------------
   0000                     170 _main:
                    0002    171 	ar2 = 0x02
                    0003    172 	ar3 = 0x03
                    0004    173 	ar4 = 0x04
                    0005    174 	ar5 = 0x05
                    0006    175 	ar6 = 0x06
                    0007    176 	ar7 = 0x07
                    0000    177 	ar0 = 0x00
                    0001    178 	ar1 = 0x01
                    0000    179 	C$main_org.c$57$1$0 ==.
                            180 ;	../main_org.c:57: const uint8_t uart_msg[] = "\n\r** Simple LED Sequence  **\n\r";
                            181 ;	genPointerSet
                            182 ;     genFarPointerSet
   0000 90s00r16            183 	mov	dptr,#_main_uart_msg_1_1
   0003 74 0A               184 	mov	a,#0x0A
   0005 F0                  185 	movx	@dptr,a
                            186 ;	genPointerSet
                            187 ;     genFarPointerSet
   0006 90s00r17            188 	mov	dptr,#(_main_uart_msg_1_1 + 0x0001)
   0009 74 0D               189 	mov	a,#0x0D
   000B F0                  190 	movx	@dptr,a
                            191 ;	genPointerSet
                            192 ;     genFarPointerSet
   000C 90s00r18            193 	mov	dptr,#(_main_uart_msg_1_1 + 0x0002)
   000F 74 2A               194 	mov	a,#0x2A
   0011 F0                  195 	movx	@dptr,a
                            196 ;	genPointerSet
                            197 ;     genFarPointerSet
   0012 90s00r19            198 	mov	dptr,#(_main_uart_msg_1_1 + 0x0003)
   0015 74 2A               199 	mov	a,#0x2A
   0017 F0                  200 	movx	@dptr,a
                            201 ;	genPointerSet
                            202 ;     genFarPointerSet
   0018 90s00r1A            203 	mov	dptr,#(_main_uart_msg_1_1 + 0x0004)
   001B 74 20               204 	mov	a,#0x20
   001D F0                  205 	movx	@dptr,a
                            206 ;	genPointerSet
                            207 ;     genFarPointerSet
   001E 90s00r1B            208 	mov	dptr,#(_main_uart_msg_1_1 + 0x0005)
   0021 74 53               209 	mov	a,#0x53
   0023 F0                  210 	movx	@dptr,a
                            211 ;	genPointerSet
                            212 ;     genFarPointerSet
   0024 90s00r1C            213 	mov	dptr,#(_main_uart_msg_1_1 + 0x0006)
   0027 74 69               214 	mov	a,#0x69
   0029 F0                  215 	movx	@dptr,a
                            216 ;	genPointerSet
                            217 ;     genFarPointerSet
   002A 90s00r1D            218 	mov	dptr,#(_main_uart_msg_1_1 + 0x0007)
   002D 74 6D               219 	mov	a,#0x6D
   002F F0                  220 	movx	@dptr,a
                            221 ;	genPointerSet
                            222 ;     genFarPointerSet
   0030 90s00r1E            223 	mov	dptr,#(_main_uart_msg_1_1 + 0x0008)
   0033 74 70               224 	mov	a,#0x70
   0035 F0                  225 	movx	@dptr,a
                            226 ;	genPointerSet
                            227 ;     genFarPointerSet
   0036 90s00r1F            228 	mov	dptr,#(_main_uart_msg_1_1 + 0x0009)
   0039 74 6C               229 	mov	a,#0x6C
   003B F0                  230 	movx	@dptr,a
                            231 ;	genPointerSet
                            232 ;     genFarPointerSet
   003C 90s00r20            233 	mov	dptr,#(_main_uart_msg_1_1 + 0x000a)
   003F 74 65               234 	mov	a,#0x65
   0041 F0                  235 	movx	@dptr,a
                            236 ;	genPointerSet
                            237 ;     genFarPointerSet
   0042 90s00r21            238 	mov	dptr,#(_main_uart_msg_1_1 + 0x000b)
   0045 74 20               239 	mov	a,#0x20
   0047 F0                  240 	movx	@dptr,a
                            241 ;	genPointerSet
                            242 ;     genFarPointerSet
   0048 90s00r22            243 	mov	dptr,#(_main_uart_msg_1_1 + 0x000c)
   004B 74 4C               244 	mov	a,#0x4C
   004D F0                  245 	movx	@dptr,a
                            246 ;	genPointerSet
                            247 ;     genFarPointerSet
   004E 90s00r23            248 	mov	dptr,#(_main_uart_msg_1_1 + 0x000d)
   0051 74 45               249 	mov	a,#0x45
   0053 F0                  250 	movx	@dptr,a
                            251 ;	genPointerSet
                            252 ;     genFarPointerSet
   0054 90s00r24            253 	mov	dptr,#(_main_uart_msg_1_1 + 0x000e)
   0057 74 44               254 	mov	a,#0x44
   0059 F0                  255 	movx	@dptr,a
                            256 ;	genPointerSet
                            257 ;     genFarPointerSet
   005A 90s00r25            258 	mov	dptr,#(_main_uart_msg_1_1 + 0x000f)
   005D 74 20               259 	mov	a,#0x20
   005F F0                  260 	movx	@dptr,a
                            261 ;	genPointerSet
                            262 ;     genFarPointerSet
   0060 90s00r26            263 	mov	dptr,#(_main_uart_msg_1_1 + 0x0010)
   0063 74 53               264 	mov	a,#0x53
   0065 F0                  265 	movx	@dptr,a
                            266 ;	genPointerSet
                            267 ;     genFarPointerSet
   0066 90s00r27            268 	mov	dptr,#(_main_uart_msg_1_1 + 0x0011)
   0069 74 65               269 	mov	a,#0x65
   006B F0                  270 	movx	@dptr,a
                            271 ;	genPointerSet
                            272 ;     genFarPointerSet
   006C 90s00r28            273 	mov	dptr,#(_main_uart_msg_1_1 + 0x0012)
   006F 74 71               274 	mov	a,#0x71
   0071 F0                  275 	movx	@dptr,a
                            276 ;	genPointerSet
                            277 ;     genFarPointerSet
   0072 90s00r29            278 	mov	dptr,#(_main_uart_msg_1_1 + 0x0013)
   0075 74 75               279 	mov	a,#0x75
   0077 F0                  280 	movx	@dptr,a
                            281 ;	genPointerSet
                            282 ;     genFarPointerSet
   0078 90s00r2A            283 	mov	dptr,#(_main_uart_msg_1_1 + 0x0014)
   007B 74 65               284 	mov	a,#0x65
   007D F0                  285 	movx	@dptr,a
                            286 ;	genPointerSet
                            287 ;     genFarPointerSet
   007E 90s00r2B            288 	mov	dptr,#(_main_uart_msg_1_1 + 0x0015)
   0081 74 6E               289 	mov	a,#0x6E
   0083 F0                  290 	movx	@dptr,a
                            291 ;	genPointerSet
                            292 ;     genFarPointerSet
   0084 90s00r2C            293 	mov	dptr,#(_main_uart_msg_1_1 + 0x0016)
   0087 74 63               294 	mov	a,#0x63
   0089 F0                  295 	movx	@dptr,a
                            296 ;	genPointerSet
                            297 ;     genFarPointerSet
   008A 90s00r2D            298 	mov	dptr,#(_main_uart_msg_1_1 + 0x0017)
   008D 74 65               299 	mov	a,#0x65
   008F F0                  300 	movx	@dptr,a
                            301 ;	genPointerSet
                            302 ;     genFarPointerSet
   0090 90s00r2E            303 	mov	dptr,#(_main_uart_msg_1_1 + 0x0018)
   0093 74 20               304 	mov	a,#0x20
   0095 F0                  305 	movx	@dptr,a
                            306 ;	genPointerSet
                            307 ;     genFarPointerSet
   0096 90s00r2F            308 	mov	dptr,#(_main_uart_msg_1_1 + 0x0019)
   0099 74 20               309 	mov	a,#0x20
   009B F0                  310 	movx	@dptr,a
                            311 ;	genPointerSet
                            312 ;     genFarPointerSet
   009C 90s00r30            313 	mov	dptr,#(_main_uart_msg_1_1 + 0x001a)
   009F 74 2A               314 	mov	a,#0x2A
   00A1 F0                  315 	movx	@dptr,a
                            316 ;	genPointerSet
                            317 ;     genFarPointerSet
   00A2 90s00r31            318 	mov	dptr,#(_main_uart_msg_1_1 + 0x001b)
   00A5 74 2A               319 	mov	a,#0x2A
   00A7 F0                  320 	movx	@dptr,a
                            321 ;	genPointerSet
                            322 ;     genFarPointerSet
   00A8 90s00r32            323 	mov	dptr,#(_main_uart_msg_1_1 + 0x001c)
   00AB 74 0A               324 	mov	a,#0x0A
   00AD F0                  325 	movx	@dptr,a
                            326 ;	genPointerSet
                            327 ;     genFarPointerSet
   00AE 90s00r33            328 	mov	dptr,#(_main_uart_msg_1_1 + 0x001d)
   00B1 74 0D               329 	mov	a,#0x0D
   00B3 F0                  330 	movx	@dptr,a
                            331 ;	genPointerSet
                            332 ;     genFarPointerSet
   00B4 90s00r34            333 	mov	dptr,#(_main_uart_msg_1_1 + 0x001e)
   00B7 74 00               334 	mov	a,#0x00
   00B9 F0                  335 	movx	@dptr,a
                    00BA    336 	C$main_org.c$58$1$0 ==.
                            337 ;	../main_org.c:58: const uint8_t linefeed[] = "\n\r";
                            338 ;	genPointerSet
                            339 ;     genFarPointerSet
   00BA 90s00r35            340 	mov	dptr,#_main_linefeed_1_1
   00BD 74 0A               341 	mov	a,#0x0A
   00BF F0                  342 	movx	@dptr,a
                            343 ;	genPointerSet
                            344 ;     genFarPointerSet
   00C0 90s00r36            345 	mov	dptr,#(_main_linefeed_1_1 + 0x0001)
   00C3 74 0D               346 	mov	a,#0x0D
   00C5 F0                  347 	movx	@dptr,a
                            348 ;	genPointerSet
                            349 ;     genFarPointerSet
   00C6 90s00r37            350 	mov	dptr,#(_main_linefeed_1_1 + 0x0002)
   00C9 74 00               351 	mov	a,#0x00
   00CB F0                  352 	movx	@dptr,a
                    00CC    353 	C$main_org.c$65$1$1 ==.
                            354 ;	../main_org.c:65: UART_init( &g_stdio_uart, APB3_BASE_ADDRESS + COREUARTAPB_0, UART_9600_BAUD, DATA_8_BITS | NO_PARITY );
                            355 ;	genAssign
   00CC 90s00r00            356 	mov	dptr,#_UART_init_PARM_2
   00CF 74 00               357 	mov	a,#0x00
   00D1 F0                  358 	movx	@dptr,a
   00D2 A3                  359 	inc	dptr
   00D3 74 F0               360 	mov	a,#0xF0
   00D5 F0                  361 	movx	@dptr,a
                            362 ;	genAssign
   00D6 90s00r00            363 	mov	dptr,#_UART_init_PARM_3
   00D9 74 26               364 	mov	a,#0x26
   00DB F0                  365 	movx	@dptr,a
   00DC E4                  366 	clr	a
   00DD A3                  367 	inc	dptr
   00DE F0                  368 	movx	@dptr,a
                            369 ;	genAssign
   00DF 90s00r00            370 	mov	dptr,#_UART_init_PARM_4
   00E2 74 01               371 	mov	a,#0x01
   00E4 F0                  372 	movx	@dptr,a
                            373 ;	genCall
   00E5 75 82r11            374 	mov	dpl,#_g_stdio_uart
   00E8 75 83s00            375 	mov	dph,#(_g_stdio_uart >> 8)
   00EB 75 F0 00            376 	mov	b,#0x00
   00EE 12s00r00            377 	lcall	_UART_init
                    00F1    378 	C$main_org.c$67$1$1 ==.
                            379 ;	../main_org.c:67: WD_init( &g_wd, APB3_BASE_ADDRESS + COREWATCHDOG_0, WatchDog_COUNT, WD_PRESCALER_DIV_16 );
                            380 ;	genAssign
   00F1 90s00r00            381 	mov	dptr,#_WD_init_PARM_2
   00F4 74 00               382 	mov	a,#0x00
   00F6 F0                  383 	movx	@dptr,a
   00F7 A3                  384 	inc	dptr
   00F8 74 F3               385 	mov	a,#0xF3
   00FA F0                  386 	movx	@dptr,a
                            387 ;	genAssign
   00FB 90s00r00            388 	mov	dptr,#_WD_init_PARM_3
   00FE 74 E8               389 	mov	a,#0xE8
   0100 F0                  390 	movx	@dptr,a
   0101 A3                  391 	inc	dptr
   0102 74 03               392 	mov	a,#0x03
   0104 F0                  393 	movx	@dptr,a
   0105 A3                  394 	inc	dptr
   0106 74 00               395 	mov	a,#0x00
   0108 F0                  396 	movx	@dptr,a
   0109 A3                  397 	inc	dptr
   010A 74 00               398 	mov	a,#0x00
   010C F0                  399 	movx	@dptr,a
                            400 ;	genAssign
   010D 90s00r00            401 	mov	dptr,#_WD_init_PARM_4
   0110 74 03               402 	mov	a,#0x03
   0112 F0                  403 	movx	@dptr,a
   0113 E4                  404 	clr	a
   0114 A3                  405 	inc	dptr
   0115 F0                  406 	movx	@dptr,a
   0116 A3                  407 	inc	dptr
   0117 F0                  408 	movx	@dptr,a
   0118 A3                  409 	inc	dptr
   0119 F0                  410 	movx	@dptr,a
                            411 ;	genCall
   011A 75 82r14            412 	mov	dpl,#_g_wd
   011D 75 83s00            413 	mov	dph,#(_g_wd >> 8)
   0120 75 F0 00            414 	mov	b,#0x00
   0123 12s00r00            415 	lcall	_WD_init
                    0126    416 	C$main_org.c$68$1$1 ==.
                            417 ;	../main_org.c:68: WD_disable( &g_wd );
                            418 ;	genCall
   0126 75 82r14            419 	mov	dpl,#_g_wd
   0129 75 83s00            420 	mov	dph,#(_g_wd >> 8)
   012C 75 F0 00            421 	mov	b,#0x00
   012F 12s00r00            422 	lcall	_WD_disable
                    0132    423 	C$main_org.c$70$1$1 ==.
                            424 ;	../main_org.c:70: GPIO_init( &g_gpio,	APB3_BASE_ADDRESS + COREGPIO_0, GPIO_APB_32_BITS_BUS );
                            425 ;	genAssign
   0132 90s00r00            426 	mov	dptr,#_GPIO_init_PARM_2
   0135 74 00               427 	mov	a,#0x00
   0137 F0                  428 	movx	@dptr,a
   0138 A3                  429 	inc	dptr
   0139 74 F1               430 	mov	a,#0xF1
   013B F0                  431 	movx	@dptr,a
                            432 ;	genAssign
   013C 90s00r00            433 	mov	dptr,#_GPIO_init_PARM_3
   013F 74 02               434 	mov	a,#0x02
   0141 F0                  435 	movx	@dptr,a
                            436 ;	genCall
   0142 75 82r0E            437 	mov	dpl,#_g_gpio
   0145 75 83s00            438 	mov	dph,#(_g_gpio >> 8)
   0148 75 F0 00            439 	mov	b,#0x00
   014B 12s00r00            440 	lcall	_GPIO_init
                    014E    441 	C$main_org.c$74$1$1 ==.
                            442 ;	../main_org.c:74: GPIO_config( &g_gpio, LED_D0, GPIO_OUTPUT_MODE );
                            443 ;	genAssign
   014E 90s00r00            444 	mov	dptr,#_GPIO_config_PARM_2
   0151 74 00               445 	mov	a,#0x00
   0153 F0                  446 	movx	@dptr,a
                            447 ;	genAssign
   0154 90s00r00            448 	mov	dptr,#_GPIO_config_PARM_3
   0157 74 05               449 	mov	a,#0x05
   0159 F0                  450 	movx	@dptr,a
   015A E4                  451 	clr	a
   015B A3                  452 	inc	dptr
   015C F0                  453 	movx	@dptr,a
   015D A3                  454 	inc	dptr
   015E F0                  455 	movx	@dptr,a
   015F A3                  456 	inc	dptr
   0160 F0                  457 	movx	@dptr,a
                            458 ;	genCall
   0161 75 82r0E            459 	mov	dpl,#_g_gpio
   0164 75 83s00            460 	mov	dph,#(_g_gpio >> 8)
   0167 75 F0 00            461 	mov	b,#0x00
   016A 12s00r00            462 	lcall	_GPIO_config
                    016D    463 	C$main_org.c$76$1$1 ==.
                            464 ;	../main_org.c:76: GPIO_config( &g_gpio, LED_D1, GPIO_OUTPUT_MODE );
                            465 ;	genAssign
   016D 90s00r00            466 	mov	dptr,#_GPIO_config_PARM_2
   0170 74 01               467 	mov	a,#0x01
   0172 F0                  468 	movx	@dptr,a
                            469 ;	genAssign
   0173 90s00r00            470 	mov	dptr,#_GPIO_config_PARM_3
   0176 74 05               471 	mov	a,#0x05
   0178 F0                  472 	movx	@dptr,a
   0179 E4                  473 	clr	a
   017A A3                  474 	inc	dptr
   017B F0                  475 	movx	@dptr,a
   017C A3                  476 	inc	dptr
   017D F0                  477 	movx	@dptr,a
   017E A3                  478 	inc	dptr
   017F F0                  479 	movx	@dptr,a
                            480 ;	genCall
   0180 75 82r0E            481 	mov	dpl,#_g_gpio
   0183 75 83s00            482 	mov	dph,#(_g_gpio >> 8)
   0186 75 F0 00            483 	mov	b,#0x00
   0189 12s00r00            484 	lcall	_GPIO_config
                    018C    485 	C$main_org.c$79$1$1 ==.
                            486 ;	../main_org.c:79: display_help();
                            487 ;	genCall
   018C 12s00r00            488 	lcall	_display_help
                    018F    489 	C$main_org.c$80$1$1 ==.
                            490 ;	../main_org.c:80: display_prompt();
                            491 ;	genCall
   018F 12s00r00            492 	lcall	_display_prompt
                    0192    493 	C$main_org.c$87$1$1 ==.
                            494 ;	../main_org.c:87: for ( sram_addr =0 ; sram_addr < 256 ; sram_addr++) {
                            495 ;	genAssign
   0192 90s00r38            496 	mov	dptr,#_main_sram_addr_1_1
   0195 E4                  497 	clr	a
   0196 F0                  498 	movx	@dptr,a
   0197 A3                  499 	inc	dptr
   0198 F0                  500 	movx	@dptr,a
   0199                     501 00106$:
                            502 ;	genAssign
   0199 90s00r38            503 	mov	dptr,#_main_sram_addr_1_1
   019C E0                  504 	movx	a,@dptr
   019D FA                  505 	mov	r2,a
   019E A3                  506 	inc	dptr
   019F E0                  507 	movx	a,@dptr
   01A0 FB                  508 	mov	r3,a
                            509 ;	genCmpLt
                            510 ;	genCmp
   01A1 C3                  511 	clr	c
   01A2 EB                  512 	mov	a,r3
   01A3 94 01               513 	subb	a,#0x01
                            514 ;	genIfxJump
   01A5 40 03               515 	jc	00122$
   01A7 02s01rDB            516 	ljmp	00109$
   01AA                     517 00122$:
                    01AA    518 	C$main_org.c$89$2$2 ==.
                            519 ;	../main_org.c:89: HW_set_16bit_reg((APB3_BASE_ADDRESS + COREAPBSRAM_0)+ sram_addr, value );
                            520 ;	genPlus
                            521 ;	genPlusIncr
                            522 ;     genPlus shortcut
   01AA 8A 04               523 	mov	ar4,r2
   01AC 74 F5               524 	mov	a,#0xF5
   01AE 25 03               525 	add	a,ar3
   01B0 FD                  526 	mov	r5,a
                            527 ;	genAssign
   01B1 90s00r00            528 	mov	dptr,#_HW_set_16bit_reg_PARM_2
   01B4 74 34               529 	mov	a,#0x34
   01B6 F0                  530 	movx	@dptr,a
   01B7 A3                  531 	inc	dptr
   01B8 74 12               532 	mov	a,#0x12
   01BA F0                  533 	movx	@dptr,a
                            534 ;	genCall
   01BB 8C 82               535 	mov	dpl,r4
   01BD 8D 83               536 	mov	dph,r5
   01BF C0 02               537 	push	ar2
   01C1 C0 03               538 	push	ar3
   01C3 12s00r00            539 	lcall	_HW_set_16bit_reg
   01C6 D0 03               540 	pop	ar3
   01C8 D0 02               541 	pop	ar2
                    01CA    542 	C$main_org.c$87$1$1 ==.
                            543 ;	../main_org.c:87: for ( sram_addr =0 ; sram_addr < 256 ; sram_addr++) {
                            544 ;	genPlus
   01CA 90s00r38            545 	mov	dptr,#_main_sram_addr_1_1
                            546 ;	genPlusIncr
   01CD 74 01               547 	mov	a,#0x01
   01CF 25 02               548 	add	a,ar2
   01D1 F0                  549 	movx	@dptr,a
   01D2 74 00               550 	mov	a,#0x00
   01D4 35 03               551 	addc	a,ar3
   01D6 A3                  552 	inc	dptr
   01D7 F0                  553 	movx	@dptr,a
   01D8 02s01r99            554 	ljmp	00106$
   01DB                     555 00109$:
                    01DB    556 	C$main_org.c$92$1$1 ==.
                            557 ;	../main_org.c:92: for ( sram_addr =0 ; sram_addr < 256 ; sram_addr++) {
                            558 ;	genAssign
   01DB 90s00r38            559 	mov	dptr,#_main_sram_addr_1_1
   01DE E4                  560 	clr	a
   01DF F0                  561 	movx	@dptr,a
   01E0 A3                  562 	inc	dptr
   01E1 F0                  563 	movx	@dptr,a
   01E2                     564 00110$:
                            565 ;	genAssign
   01E2 90s00r38            566 	mov	dptr,#_main_sram_addr_1_1
   01E5 E0                  567 	movx	a,@dptr
   01E6 FA                  568 	mov	r2,a
   01E7 A3                  569 	inc	dptr
   01E8 E0                  570 	movx	a,@dptr
   01E9 FB                  571 	mov	r3,a
                            572 ;	genCmpLt
                            573 ;	genCmp
   01EA C3                  574 	clr	c
   01EB EB                  575 	mov	a,r3
   01EC 94 01               576 	subb	a,#0x01
                            577 ;	genIfxJump
   01EE 40 03               578 	jc	00123$
   01F0 02s02r1A            579 	ljmp	00104$
   01F3                     580 00123$:
                    01F3    581 	C$main_org.c$94$2$3 ==.
                            582 ;	../main_org.c:94: testvar = HW_get_16bit_reg((APB3_BASE_ADDRESS + COREAPBSRAM_0)+ sram_addr);
                            583 ;	genPlus
                            584 ;	genPlusIncr
                            585 ;     genPlus shortcut
   01F3 8A 04               586 	mov	ar4,r2
   01F5 74 F5               587 	mov	a,#0xF5
   01F7 25 03               588 	add	a,ar3
   01F9 FD                  589 	mov	r5,a
                            590 ;	genCall
   01FA 8C 82               591 	mov	dpl,r4
   01FC 8D 83               592 	mov	dph,r5
   01FE C0 02               593 	push	ar2
   0200 C0 03               594 	push	ar3
   0202 12s00r00            595 	lcall	_HW_get_16bit_reg
   0205 D0 03               596 	pop	ar3
   0207 D0 02               597 	pop	ar2
                    0209    598 	C$main_org.c$92$1$1 ==.
                            599 ;	../main_org.c:92: for ( sram_addr =0 ; sram_addr < 256 ; sram_addr++) {
                            600 ;	genPlus
   0209 90s00r38            601 	mov	dptr,#_main_sram_addr_1_1
                            602 ;	genPlusIncr
   020C 74 01               603 	mov	a,#0x01
   020E 25 02               604 	add	a,ar2
   0210 F0                  605 	movx	@dptr,a
   0211 74 00               606 	mov	a,#0x00
   0213 35 03               607 	addc	a,ar3
   0215 A3                  608 	inc	dptr
   0216 F0                  609 	movx	@dptr,a
   0217 02s01rE2            610 	ljmp	00110$
                    021A    611 	C$main_org.c$100$1$1 ==.
                            612 ;	../main_org.c:100: while( 1 )
   021A                     613 00104$:
                    021A    614 	C$main_org.c$109$2$4 ==.
                            615 ;	../main_org.c:109: rx_size = UART_get_rx(&g_stdio_uart, &rx_data[1],1);
                            616 ;	genCast
   021A 90s00r00            617 	mov	dptr,#_UART_get_rx_PARM_2
   021D 74r3B               618 	mov	a,#(_main_rx_data_2_4 + 0x0001)
   021F F0                  619 	movx	@dptr,a
   0220 A3                  620 	inc	dptr
   0221 74s00               621 	mov	a,#((_main_rx_data_2_4 + 0x0001) >> 8)
   0223 F0                  622 	movx	@dptr,a
   0224 A3                  623 	inc	dptr
   0225 74 00               624 	mov	a,#0x0
   0227 F0                  625 	movx	@dptr,a
                            626 ;	genAssign
   0228 90s00r00            627 	mov	dptr,#_UART_get_rx_PARM_3
   022B 74 01               628 	mov	a,#0x01
   022D F0                  629 	movx	@dptr,a
   022E E4                  630 	clr	a
   022F A3                  631 	inc	dptr
   0230 F0                  632 	movx	@dptr,a
                            633 ;	genCall
   0231 75 82r11            634 	mov	dpl,#_g_stdio_uart
   0234 75 83s00            635 	mov	dph,#(_g_stdio_uart >> 8)
   0237 75 F0 00            636 	mov	b,#0x00
   023A 12s00r00            637 	lcall	_UART_get_rx
   023D AA 82               638 	mov	r2,dpl
   023F AB 83               639 	mov	r3,dph
                            640 ;	genCast
                    0241    641 	C$main_org.c$111$2$4 ==.
                            642 ;	../main_org.c:111: if ( rx_size == 1){
                            643 ;	genCmpEq
                            644 ;	gencjneshort
   0241 BA 01 02            645 	cjne	r2,#0x01,00124$
   0244 80 03               646 	sjmp	00125$
   0246                     647 00124$:
   0246 02s02r1A            648 	ljmp	00104$
   0249                     649 00125$:
                    0249    650 	C$main_org.c$113$3$5 ==.
                            651 ;	../main_org.c:113: key = rx_data[1];
                            652 ;	genPointerGet
                            653 ;	genFarPointerGet
   0249 90s00r3B            654 	mov	dptr,#(_main_rx_data_2_4 + 0x0001)
   024C E0                  655 	movx	a,@dptr
   024D FA                  656 	mov	r2,a
                            657 ;	genAssign
   024E 90s00r00            658 	mov	dptr,#_key
   0251 EA                  659 	mov	a,r2
   0252 F0                  660 	movx	@dptr,a
                    0253    661 	C$main_org.c$114$3$5 ==.
                            662 ;	../main_org.c:114: process_uart_data(key);
                            663 ;	genCall
   0253 8A 82               664 	mov	dpl,r2
   0255 12s00r00            665 	lcall	_process_uart_data
   0258 02s02r1A            666 	ljmp	00104$
   025B                     667 00114$:
                    025B    668 	C$main_org.c$122$1$1 ==.
                    025B    669 	XG$main$0$0 ==.
   025B 22                  670 	ret
                            671 ;------------------------------------------------------------
                            672 ;Allocation info for local variables in function 'wait'
                            673 ;------------------------------------------------------------
                            674 ;time_in_ms                Allocated with name '_wait_time_in_ms_1_1'
                            675 ;i                         Allocated with name '_wait_i_1_1'
                            676 ;------------------------------------------------------------
                    025C    677 	G$wait$0$0 ==.
                    025C    678 	C$main_org.c$126$1$1 ==.
                            679 ;	../main_org.c:126: void wait(int time_in_ms)
                            680 ;	-----------------------------------------
                            681 ;	 function wait
                            682 ;	-----------------------------------------
   025C                     683 _wait:
                            684 ;	genReceive
   025C AA 83               685 	mov	r2,dph
   025E E5 82               686 	mov	a,dpl
   0260 90s00r3C            687 	mov	dptr,#_wait_time_in_ms_1_1
   0263 F0                  688 	movx	@dptr,a
   0264 A3                  689 	inc	dptr
   0265 EA                  690 	mov	a,r2
   0266 F0                  691 	movx	@dptr,a
                    0267    692 	C$main_org.c$131$1$1 ==.
                            693 ;	../main_org.c:131: for (i=0; i < time_in_ms*10000; i++)
                            694 ;	genAssign
   0267 90s00r3E            695 	mov	dptr,#_wait_i_1_1
   026A E4                  696 	clr	a
   026B F0                  697 	movx	@dptr,a
   026C A3                  698 	inc	dptr
   026D F0                  699 	movx	@dptr,a
                            700 ;	genAssign
   026E 90s00r3C            701 	mov	dptr,#_wait_time_in_ms_1_1
   0271 E0                  702 	movx	a,@dptr
   0272 FA                  703 	mov	r2,a
   0273 A3                  704 	inc	dptr
   0274 E0                  705 	movx	a,@dptr
   0275 FB                  706 	mov	r3,a
                            707 ;	genAssign
   0276 90s00r00            708 	mov	dptr,#__mulint_PARM_2
   0279 EA                  709 	mov	a,r2
   027A F0                  710 	movx	@dptr,a
   027B A3                  711 	inc	dptr
   027C EB                  712 	mov	a,r3
   027D F0                  713 	movx	@dptr,a
                            714 ;	genCall
   027E 75 82 10            715 	mov	dpl,#0x10
   0281 75 83 27            716 	mov	dph,#0x27
   0284 12s00r00            717 	lcall	__mulint
   0287 AA 82               718 	mov	r2,dpl
   0289 AB 83               719 	mov	r3,dph
   028B                     720 00101$:
                            721 ;	genAssign
   028B 90s00r3E            722 	mov	dptr,#_wait_i_1_1
   028E E0                  723 	movx	a,@dptr
   028F FC                  724 	mov	r4,a
   0290 A3                  725 	inc	dptr
   0291 E0                  726 	movx	a,@dptr
   0292 FD                  727 	mov	r5,a
                            728 ;	genCmpLt
                            729 ;	genCmp
   0293 C3                  730 	clr	c
   0294 EC                  731 	mov	a,r4
   0295 9A                  732 	subb	a,r2
   0296 ED                  733 	mov	a,r5
   0297 64 80               734 	xrl	a,#0x80
   0299 8B F0               735 	mov	b,r3
   029B 63 F0 80            736 	xrl	b,#0x80
   029E 95 F0               737 	subb	a,b
                            738 ;	genIfxJump
   02A0 40 03               739 	jc	00109$
   02A2 02s02rB6            740 	ljmp	00105$
   02A5                     741 00109$:
                            742 ;	genPlus
   02A5 90s00r3E            743 	mov	dptr,#_wait_i_1_1
                            744 ;	genPlusIncr
   02A8 74 01               745 	mov	a,#0x01
   02AA 25 04               746 	add	a,ar4
   02AC F0                  747 	movx	@dptr,a
   02AD 74 00               748 	mov	a,#0x00
   02AF 35 05               749 	addc	a,ar5
   02B1 A3                  750 	inc	dptr
   02B2 F0                  751 	movx	@dptr,a
   02B3 02s02r8B            752 	ljmp	00101$
   02B6                     753 00105$:
                    02B6    754 	C$main_org.c$136$1$1 ==.
                    02B6    755 	XG$wait$0$0 ==.
   02B6 22                  756 	ret
                            757 	.area CSEG    (CODE)
                            758 	.area CONST   (CODE)
                            759 	.area XINIT   (CODE)
                            760 	.area CABS    (ABS,CODE)
