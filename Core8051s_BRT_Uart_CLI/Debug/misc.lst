                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.3 #4543 (Dec 31 2006)
                              4 ; This file generated Wed May 04 10:48:17 2016
                              5 ;--------------------------------------------------------
                              6 	.module ___misc
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _xatoi_PARM_2
                             13 	.globl _int_to_dec_int_PARM_2
                             14 	.globl _int_to_hex_int_PARM_3
                             15 	.globl _int_to_hex_int_PARM_2
                             16 	.globl _dp_display_array_PARM_3
                             17 	.globl _dp_display_array_PARM_2
                             18 	.globl _dp_display_value_PARM_2
                             19 	.globl _g_stdio_uart
                             20 	.globl _dp_display_text
                             21 	.globl _dp_display_value
                             22 	.globl _dp_display_array
                             23 	.globl _int_to_hex_int
                             24 	.globl _int_to_dec_int
                             25 	.globl _xatoi
                             26 	.globl _getParity
                             27 ;--------------------------------------------------------
                             28 ; special function registers
                             29 ;--------------------------------------------------------
                             30 	.area RSEG    (DATA)
                             31 ;--------------------------------------------------------
                             32 ; special function bits
                             33 ;--------------------------------------------------------
                             34 	.area RSEG    (DATA)
                             35 ;--------------------------------------------------------
                             36 ; overlayable register banks
                             37 ;--------------------------------------------------------
                             38 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      39 	.ds 8
                             40 ;--------------------------------------------------------
                             41 ; internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area DSEG    (DATA)
                    0000     44 Ldp_display_array$sloc0$1$0==.
   0000                      45 _dp_display_array_sloc0_1_0:
   0000                      46 	.ds 2
                    0002     47 Ldp_display_array$sloc1$1$0==.
   0002                      48 _dp_display_array_sloc1_1_0:
   0002                      49 	.ds 2
                    0004     50 Lint_to_hex_int$sloc0$1$0==.
   0004                      51 _int_to_hex_int_sloc0_1_0:
   0004                      52 	.ds 2
                    0006     53 Lint_to_hex_int$sloc1$1$0==.
   0006                      54 _int_to_hex_int_sloc1_1_0:
   0006                      55 	.ds 3
                    0009     56 Lint_to_dec_int$sloc0$1$0==.
   0009                      57 _int_to_dec_int_sloc0_1_0:
   0009                      58 	.ds 3
                             59 ;--------------------------------------------------------
                             60 ; overlayable items in internal ram 
                             61 ;--------------------------------------------------------
                             62 	.area OSEG    (OVR,DATA)
                             63 ;--------------------------------------------------------
                             64 ; indirectly addressable internal ram data
                             65 ;--------------------------------------------------------
                             66 	.area ISEG    (DATA)
                             67 ;--------------------------------------------------------
                             68 ; absolute internal ram data
                             69 ;--------------------------------------------------------
                             70 	.area IABS    (ABS,DATA)
                             71 	.area IABS    (ABS,DATA)
                             72 ;--------------------------------------------------------
                             73 ; bit data
                             74 ;--------------------------------------------------------
                             75 	.area BSEG    (BIT)
                             76 ;--------------------------------------------------------
                             77 ; paged external ram data
                             78 ;--------------------------------------------------------
                             79 	.area PSEG    (PAG,XDATA)
                             80 ;--------------------------------------------------------
                             81 ; external ram data
                             82 ;--------------------------------------------------------
                             83 	.area XSEG    (XDATA)
                    0000     84 G$g_stdio_uart$0$0==.
   0000                      85 _g_stdio_uart::
   0000                      86 	.ds 3
                    0003     87 Ldp_display_text$text$1$1==.
   0003                      88 _dp_display_text_text_1_1:
   0003                      89 	.ds 3
                    0006     90 Ldp_display_text$length$1$1==.
   0006                      91 _dp_display_text_length_1_1:
   0006                      92 	.ds 2
                    0008     93 Ldp_display_value$descriptive$1$1==.
   0008                      94 _dp_display_value_PARM_2:
   0008                      95 	.ds 2
                    000A     96 Ldp_display_value$value$1$1==.
   000A                      97 _dp_display_value_value_1_1:
   000A                      98 	.ds 4
                    000E     99 Ldp_display_value$value_text$1$1==.
   000E                     100 _dp_display_value_value_text_1_1:
   000E                     101 	.ds 256
                    010E    102 Ldp_display_value$text_size$1$1==.
   010E                     103 _dp_display_value_text_size_1_1:
   010E                     104 	.ds 2
                    0110    105 Ldp_display_array$bytes$1$1==.
   0110                     106 _dp_display_array_PARM_2:
   0110                     107 	.ds 2
                    0112    108 Ldp_display_array$descriptive$1$1==.
   0112                     109 _dp_display_array_PARM_3:
   0112                     110 	.ds 2
                    0114    111 Ldp_display_array$value$1$1==.
   0114                     112 _dp_display_array_value_1_1:
   0114                     113 	.ds 3
                    0117    114 Ldp_display_array$idx$1$1==.
   0117                     115 _dp_display_array_idx_1_1:
   0117                     116 	.ds 2
                    0119    117 Lint_to_hex_int$p_result$1$1==.
   0119                     118 _int_to_hex_int_PARM_2:
   0119                     119 	.ds 3
                    011C    120 Lint_to_hex_int$result_size$1$1==.
   011C                     121 _int_to_hex_int_PARM_3:
   011C                     122 	.ds 2
                    011E    123 Lint_to_hex_int$value$1$1==.
   011E                     124 _int_to_hex_int_value_1_1:
   011E                     125 	.ds 2
                    0120    126 Lint_to_hex_int$nibble_idx$1$1==.
   0120                     127 _int_to_hex_int_nibble_idx_1_1:
   0120                     128 	.ds 2
                    0122    129 Lint_to_hex_int$nb_nibbles$1$1==.
   0122                     130 _int_to_hex_int_nb_nibbles_1_1:
   0122                     131 	.ds 2
                    0124    132 Lint_to_hex_int$conv_array$1$1==.
   0124                     133 _int_to_hex_int_conv_array_1_1:
   0124                     134 	.ds 8
                    012C    135 Lint_to_hex_int$uvalue$1$1==.
   012C                     136 _int_to_hex_int_uvalue_1_1:
   012C                     137 	.ds 2
                    012E    138 Lint_to_dec_int$p_result$1$1==.
   012E                     139 _int_to_dec_int_PARM_2:
   012E                     140 	.ds 3
                    0131    141 Lint_to_dec_int$value$1$1==.
   0131                     142 _int_to_dec_int_value_1_1:
   0131                     143 	.ds 2
                    0133    144 Lint_to_dec_int$conv_array$1$1==.
   0133                     145 _int_to_dec_int_conv_array_1_1:
   0133                     146 	.ds 8
                    013B    147 Lint_to_dec_int$uvalue$1$1==.
   013B                     148 _int_to_dec_int_uvalue_1_1:
   013B                     149 	.ds 2
                    013D    150 Lint_to_dec_int$digit_idx$1$1==.
   013D                     151 _int_to_dec_int_digit_idx_1_1:
   013D                     152 	.ds 2
                    013F    153 Lint_to_dec_int$nb_digits$1$1==.
   013F                     154 _int_to_dec_int_nb_digits_1_1:
   013F                     155 	.ds 2
                    0141    156 Lxatoi$res$1$1==.
   0141                     157 _xatoi_PARM_2:
   0141                     158 	.ds 3
                    0144    159 Lxatoi$str$1$1==.
   0144                     160 _xatoi_str_1_1:
   0144                     161 	.ds 3
                    0147    162 Lxatoi$val$1$1==.
   0147                     163 _xatoi_val_1_1:
   0147                     164 	.ds 4
                    014B    165 Lxatoi$c$1$1==.
   014B                     166 _xatoi_c_1_1:
   014B                     167 	.ds 1
                    014C    168 Lxatoi$r$1$1==.
   014C                     169 _xatoi_r_1_1:
   014C                     170 	.ds 1
                    014D    171 Lxatoi$s$1$1==.
   014D                     172 _xatoi_s_1_1:
   014D                     173 	.ds 1
                    014E    174 LgetParity$n$1$1==.
   014E                     175 _getParity_n_1_1:
   014E                     176 	.ds 2
                    0150    177 LgetParity$parity$1$1==.
   0150                     178 _getParity_parity_1_1:
   0150                     179 	.ds 1
                            180 ;--------------------------------------------------------
                            181 ; external initialized ram data
                            182 ;--------------------------------------------------------
                            183 	.area XISEG   (XDATA)
                            184 	.area HOME    (CODE)
                            185 	.area GSINIT0 (CODE)
                            186 	.area GSINIT1 (CODE)
                            187 	.area GSINIT2 (CODE)
                            188 	.area GSINIT3 (CODE)
                            189 	.area GSINIT4 (CODE)
                            190 	.area GSINIT5 (CODE)
                            191 	.area GSINIT  (CODE)
                            192 	.area GSFINAL (CODE)
                            193 	.area CSEG    (CODE)
                            194 ;--------------------------------------------------------
                            195 ; global & static initialisations
                            196 ;--------------------------------------------------------
                            197 	.area HOME    (CODE)
                            198 	.area GSINIT  (CODE)
                            199 	.area GSFINAL (CODE)
                            200 	.area GSINIT  (CODE)
                            201 ;--------------------------------------------------------
                            202 ; Home
                            203 ;--------------------------------------------------------
                            204 	.area HOME    (CODE)
                            205 	.area HOME    (CODE)
                            206 ;--------------------------------------------------------
                            207 ; code
                            208 ;--------------------------------------------------------
                            209 	.area CSEG    (CODE)
                            210 ;------------------------------------------------------------
                            211 ;Allocation info for local variables in function 'dp_display_text'
                            212 ;------------------------------------------------------------
                            213 ;text                      Allocated with name '_dp_display_text_text_1_1'
                            214 ;length                    Allocated with name '_dp_display_text_length_1_1'
                            215 ;------------------------------------------------------------
                    0000    216 	G$dp_display_text$0$0 ==.
                    0000    217 	C$misc.c$9$0$0 ==.
                            218 ;	../misc.c:9: void dp_display_text(uint8_t * text)
                            219 ;	-----------------------------------------
                            220 ;	 function dp_display_text
                            221 ;	-----------------------------------------
   0000                     222 _dp_display_text:
                    0002    223 	ar2 = 0x02
                    0003    224 	ar3 = 0x03
                    0004    225 	ar4 = 0x04
                    0005    226 	ar5 = 0x05
                    0006    227 	ar6 = 0x06
                    0007    228 	ar7 = 0x07
                    0000    229 	ar0 = 0x00
                    0001    230 	ar1 = 0x01
                            231 ;	genReceive
   0000 AA F0               232 	mov	r2,b
   0002 AB 83               233 	mov	r3,dph
   0004 E5 82               234 	mov	a,dpl
   0006 90s00r03            235 	mov	dptr,#_dp_display_text_text_1_1
   0009 F0                  236 	movx	@dptr,a
   000A A3                  237 	inc	dptr
   000B EB                  238 	mov	a,r3
   000C F0                  239 	movx	@dptr,a
   000D A3                  240 	inc	dptr
   000E EA                  241 	mov	a,r2
   000F F0                  242 	movx	@dptr,a
                    0010    243 	C$misc.c$13$1$1 ==.
                            244 ;	../misc.c:13: length = 0;
                            245 ;	genAssign
   0010 90s00r06            246 	mov	dptr,#_dp_display_text_length_1_1
   0013 E4                  247 	clr	a
   0014 F0                  248 	movx	@dptr,a
   0015 A3                  249 	inc	dptr
   0016 F0                  250 	movx	@dptr,a
                    0017    251 	C$misc.c$14$1$1 ==.
                            252 ;	../misc.c:14: while (text[length++]!='\0');
                            253 ;	genAssign
   0017 90s00r03            254 	mov	dptr,#_dp_display_text_text_1_1
   001A E0                  255 	movx	a,@dptr
   001B FA                  256 	mov	r2,a
   001C A3                  257 	inc	dptr
   001D E0                  258 	movx	a,@dptr
   001E FB                  259 	mov	r3,a
   001F A3                  260 	inc	dptr
   0020 E0                  261 	movx	a,@dptr
   0021 FC                  262 	mov	r4,a
   0022                     263 00101$:
                            264 ;	genAssign
   0022 90s00r06            265 	mov	dptr,#_dp_display_text_length_1_1
   0025 E0                  266 	movx	a,@dptr
   0026 FD                  267 	mov	r5,a
   0027 A3                  268 	inc	dptr
   0028 E0                  269 	movx	a,@dptr
   0029 FE                  270 	mov	r6,a
                            271 ;	genPlus
   002A 90s00r06            272 	mov	dptr,#_dp_display_text_length_1_1
                            273 ;	genPlusIncr
   002D 74 01               274 	mov	a,#0x01
   002F 25 05               275 	add	a,ar5
   0031 F0                  276 	movx	@dptr,a
   0032 74 00               277 	mov	a,#0x00
   0034 35 06               278 	addc	a,ar6
   0036 A3                  279 	inc	dptr
   0037 F0                  280 	movx	@dptr,a
                            281 ;	genPlus
   0038 E5 05               282 	mov	a,ar5
   003A 25 02               283 	add	a,ar2
   003C FD                  284 	mov	r5,a
   003D E5 06               285 	mov	a,ar6
   003F 35 03               286 	addc	a,ar3
   0041 FE                  287 	mov	r6,a
   0042 8C 07               288 	mov	ar7,r4
                            289 ;	genPointerGet
                            290 ;	genGenPointerGet
   0044 8D 82               291 	mov	dpl,r5
   0046 8E 83               292 	mov	dph,r6
   0048 8F F0               293 	mov	b,r7
   004A 12s00r00            294 	lcall	__gptrget
   004D FD                  295 	mov	r5,a
                            296 ;	genCmpEq
                            297 ;	gencjneshort
   004E BD 00 02            298 	cjne	r5,#0x00,00108$
   0051 80 03               299 	sjmp	00109$
   0053                     300 00108$:
   0053 02s00r22            301 	ljmp	00101$
   0056                     302 00109$:
                    0056    303 	C$misc.c$16$1$1 ==.
                            304 ;	../misc.c:16: UART_send(&g_stdio_uart, (uint8_t *)text,length);
                            305 ;	genAssign
   0056 90s00r06            306 	mov	dptr,#_dp_display_text_length_1_1
   0059 E0                  307 	movx	a,@dptr
   005A FD                  308 	mov	r5,a
   005B A3                  309 	inc	dptr
   005C E0                  310 	movx	a,@dptr
   005D FE                  311 	mov	r6,a
                            312 ;	genAssign
   005E 90s00r00            313 	mov	dptr,#_UART_send_PARM_2
   0061 EA                  314 	mov	a,r2
   0062 F0                  315 	movx	@dptr,a
   0063 A3                  316 	inc	dptr
   0064 EB                  317 	mov	a,r3
   0065 F0                  318 	movx	@dptr,a
   0066 A3                  319 	inc	dptr
   0067 EC                  320 	mov	a,r4
   0068 F0                  321 	movx	@dptr,a
                            322 ;	genAssign
   0069 90s00r00            323 	mov	dptr,#_UART_send_PARM_3
   006C ED                  324 	mov	a,r5
   006D F0                  325 	movx	@dptr,a
   006E A3                  326 	inc	dptr
   006F EE                  327 	mov	a,r6
   0070 F0                  328 	movx	@dptr,a
                            329 ;	genCall
   0071 75 82r00            330 	mov	dpl,#_g_stdio_uart
   0074 75 83s00            331 	mov	dph,#(_g_stdio_uart >> 8)
   0077 75 F0 00            332 	mov	b,#0x00
   007A 12s00r00            333 	lcall	_UART_send
   007D                     334 00104$:
                    007D    335 	C$misc.c$17$1$1 ==.
                    007D    336 	XG$dp_display_text$0$0 ==.
   007D 22                  337 	ret
                            338 ;------------------------------------------------------------
                            339 ;Allocation info for local variables in function 'dp_display_value'
                            340 ;------------------------------------------------------------
                            341 ;descriptive               Allocated with name '_dp_display_value_PARM_2'
                            342 ;value                     Allocated with name '_dp_display_value_value_1_1'
                            343 ;value_text                Allocated with name '_dp_display_value_value_text_1_1'
                            344 ;text_size                 Allocated with name '_dp_display_value_text_size_1_1'
                            345 ;------------------------------------------------------------
                    007E    346 	G$dp_display_value$0$0 ==.
                    007E    347 	C$misc.c$19$1$1 ==.
                            348 ;	../misc.c:19: void dp_display_value(uint32_t value,DPUINT descriptive)
                            349 ;	-----------------------------------------
                            350 ;	 function dp_display_value
                            351 ;	-----------------------------------------
   007E                     352 _dp_display_value:
                            353 ;	genReceive
   007E AA 82               354 	mov	r2,dpl
   0080 AB 83               355 	mov	r3,dph
   0082 AC F0               356 	mov	r4,b
   0084 FD                  357 	mov	r5,a
   0085 90s00r0A            358 	mov	dptr,#_dp_display_value_value_1_1
   0088 EA                  359 	mov	a,r2
   0089 F0                  360 	movx	@dptr,a
   008A A3                  361 	inc	dptr
   008B EB                  362 	mov	a,r3
   008C F0                  363 	movx	@dptr,a
   008D A3                  364 	inc	dptr
   008E EC                  365 	mov	a,r4
   008F F0                  366 	movx	@dptr,a
   0090 A3                  367 	inc	dptr
   0091 ED                  368 	mov	a,r5
   0092 F0                  369 	movx	@dptr,a
                    0093    370 	C$misc.c$24$1$1 ==.
                            371 ;	../misc.c:24: if (descriptive == HEX)
                            372 ;	genAssign
   0093 90s00r08            373 	mov	dptr,#_dp_display_value_PARM_2
   0096 E0                  374 	movx	a,@dptr
   0097 FA                  375 	mov	r2,a
   0098 A3                  376 	inc	dptr
   0099 E0                  377 	movx	a,@dptr
   009A FB                  378 	mov	r3,a
                            379 ;	genIfx
   009B EA                  380 	mov	a,r2
   009C 4B                  381 	orl	a,r3
                            382 ;	genIfxJump
   009D 60 03               383 	jz	00107$
   009F 02s00rDE            384 	ljmp	00102$
   00A2                     385 00107$:
                    00A2    386 	C$misc.c$26$2$2 ==.
                            387 ;	../misc.c:26: text_size = int_to_hex_int( value, value_text, 8);
                            388 ;	genAssign
   00A2 90s00r0A            389 	mov	dptr,#_dp_display_value_value_1_1
   00A5 E0                  390 	movx	a,@dptr
   00A6 FA                  391 	mov	r2,a
   00A7 A3                  392 	inc	dptr
   00A8 E0                  393 	movx	a,@dptr
   00A9 FB                  394 	mov	r3,a
   00AA A3                  395 	inc	dptr
   00AB E0                  396 	movx	a,@dptr
   00AC FC                  397 	mov	r4,a
   00AD A3                  398 	inc	dptr
   00AE E0                  399 	movx	a,@dptr
   00AF FD                  400 	mov	r5,a
                            401 ;	genCast
                            402 ;	genCast
   00B0 90s01r19            403 	mov	dptr,#_int_to_hex_int_PARM_2
   00B3 74r0E               404 	mov	a,#_dp_display_value_value_text_1_1
   00B5 F0                  405 	movx	@dptr,a
   00B6 A3                  406 	inc	dptr
   00B7 74s00               407 	mov	a,#(_dp_display_value_value_text_1_1 >> 8)
   00B9 F0                  408 	movx	@dptr,a
   00BA A3                  409 	inc	dptr
   00BB 74 00               410 	mov	a,#0x0
   00BD F0                  411 	movx	@dptr,a
                            412 ;	genAssign
   00BE 90s01r1C            413 	mov	dptr,#_int_to_hex_int_PARM_3
   00C1 74 08               414 	mov	a,#0x08
   00C3 F0                  415 	movx	@dptr,a
   00C4 E4                  416 	clr	a
   00C5 A3                  417 	inc	dptr
   00C6 F0                  418 	movx	@dptr,a
                            419 ;	genCall
   00C7 8A 82               420 	mov	dpl,r2
   00C9 8B 83               421 	mov	dph,r3
   00CB 12s02r1A            422 	lcall	_int_to_hex_int
   00CE E5 82               423 	mov	a,dpl
   00D0 85 83 F0            424 	mov	b,dph
                            425 ;	genAssign
   00D3 90s01r0E            426 	mov	dptr,#_dp_display_value_text_size_1_1
   00D6 F0                  427 	movx	@dptr,a
   00D7 A3                  428 	inc	dptr
   00D8 E5 F0               429 	mov	a,b
   00DA F0                  430 	movx	@dptr,a
   00DB 02s01r0E            431 	ljmp	00103$
   00DE                     432 00102$:
                    00DE    433 	C$misc.c$30$2$3 ==.
                            434 ;	../misc.c:30: text_size = int_to_dec_int( value, value_text);
                            435 ;	genAssign
   00DE 90s00r0A            436 	mov	dptr,#_dp_display_value_value_1_1
   00E1 E0                  437 	movx	a,@dptr
   00E2 FA                  438 	mov	r2,a
   00E3 A3                  439 	inc	dptr
   00E4 E0                  440 	movx	a,@dptr
   00E5 FB                  441 	mov	r3,a
   00E6 A3                  442 	inc	dptr
   00E7 E0                  443 	movx	a,@dptr
   00E8 FC                  444 	mov	r4,a
   00E9 A3                  445 	inc	dptr
   00EA E0                  446 	movx	a,@dptr
   00EB FD                  447 	mov	r5,a
                            448 ;	genCast
                            449 ;	genCast
   00EC 90s01r2E            450 	mov	dptr,#_int_to_dec_int_PARM_2
   00EF 74r0E               451 	mov	a,#_dp_display_value_value_text_1_1
   00F1 F0                  452 	movx	@dptr,a
   00F2 A3                  453 	inc	dptr
   00F3 74s00               454 	mov	a,#(_dp_display_value_value_text_1_1 >> 8)
   00F5 F0                  455 	movx	@dptr,a
   00F6 A3                  456 	inc	dptr
   00F7 74 00               457 	mov	a,#0x0
   00F9 F0                  458 	movx	@dptr,a
                            459 ;	genCall
   00FA 8A 82               460 	mov	dpl,r2
   00FC 8B 83               461 	mov	dph,r3
   00FE 12s03rB3            462 	lcall	_int_to_dec_int
   0101 E5 82               463 	mov	a,dpl
   0103 85 83 F0            464 	mov	b,dph
                            465 ;	genAssign
   0106 90s01r0E            466 	mov	dptr,#_dp_display_value_text_size_1_1
   0109 F0                  467 	movx	@dptr,a
   010A A3                  468 	inc	dptr
   010B E5 F0               469 	mov	a,b
   010D F0                  470 	movx	@dptr,a
   010E                     471 00103$:
                    010E    472 	C$misc.c$32$1$1 ==.
                            473 ;	../misc.c:32: UART_send (&g_stdio_uart, value_text, text_size);
                            474 ;	genAssign
   010E 90s01r0E            475 	mov	dptr,#_dp_display_value_text_size_1_1
   0111 E0                  476 	movx	a,@dptr
   0112 FA                  477 	mov	r2,a
   0113 A3                  478 	inc	dptr
   0114 E0                  479 	movx	a,@dptr
   0115 FB                  480 	mov	r3,a
                            481 ;	genAssign
   0116 90s00r00            482 	mov	dptr,#_UART_send_PARM_2
   0119 74r0E               483 	mov	a,#_dp_display_value_value_text_1_1
   011B F0                  484 	movx	@dptr,a
   011C A3                  485 	inc	dptr
   011D 74s00               486 	mov	a,#(_dp_display_value_value_text_1_1 >> 8)
   011F F0                  487 	movx	@dptr,a
   0120 A3                  488 	inc	dptr
   0121 74 00               489 	mov	a,#0x00
   0123 F0                  490 	movx	@dptr,a
                            491 ;	genAssign
   0124 90s00r00            492 	mov	dptr,#_UART_send_PARM_3
   0127 EA                  493 	mov	a,r2
   0128 F0                  494 	movx	@dptr,a
   0129 A3                  495 	inc	dptr
   012A EB                  496 	mov	a,r3
   012B F0                  497 	movx	@dptr,a
                            498 ;	genCall
   012C 75 82r00            499 	mov	dpl,#_g_stdio_uart
   012F 75 83s00            500 	mov	dph,#(_g_stdio_uart >> 8)
   0132 75 F0 00            501 	mov	b,#0x00
   0135 12s00r00            502 	lcall	_UART_send
   0138                     503 00104$:
                    0138    504 	C$misc.c$34$1$1 ==.
                    0138    505 	XG$dp_display_value$0$0 ==.
   0138 22                  506 	ret
                            507 ;------------------------------------------------------------
                            508 ;Allocation info for local variables in function 'dp_display_array'
                            509 ;------------------------------------------------------------
                            510 ;sloc0                     Allocated with name '_dp_display_array_sloc0_1_0'
                            511 ;sloc1                     Allocated with name '_dp_display_array_sloc1_1_0'
                            512 ;bytes                     Allocated with name '_dp_display_array_PARM_2'
                            513 ;descriptive               Allocated with name '_dp_display_array_PARM_3'
                            514 ;value                     Allocated with name '_dp_display_array_value_1_1'
                            515 ;idx                       Allocated with name '_dp_display_array_idx_1_1'
                            516 ;------------------------------------------------------------
                    0139    517 	G$dp_display_array$0$0 ==.
                    0139    518 	C$misc.c$35$1$1 ==.
                            519 ;	../misc.c:35: void dp_display_array(uint8_t *value,DPUINT bytes, DPUINT descriptive)
                            520 ;	-----------------------------------------
                            521 ;	 function dp_display_array
                            522 ;	-----------------------------------------
   0139                     523 _dp_display_array:
                            524 ;	genReceive
   0139 AA F0               525 	mov	r2,b
   013B AB 83               526 	mov	r3,dph
   013D E5 82               527 	mov	a,dpl
   013F 90s01r14            528 	mov	dptr,#_dp_display_array_value_1_1
   0142 F0                  529 	movx	@dptr,a
   0143 A3                  530 	inc	dptr
   0144 EB                  531 	mov	a,r3
   0145 F0                  532 	movx	@dptr,a
   0146 A3                  533 	inc	dptr
   0147 EA                  534 	mov	a,r2
   0148 F0                  535 	movx	@dptr,a
                    0149    536 	C$misc.c$38$1$1 ==.
                            537 ;	../misc.c:38: for (idx=0;idx<bytes;idx++)
                            538 ;	genAssign
   0149 90s01r17            539 	mov	dptr,#_dp_display_array_idx_1_1
   014C E4                  540 	clr	a
   014D F0                  541 	movx	@dptr,a
   014E A3                  542 	inc	dptr
   014F F0                  543 	movx	@dptr,a
                            544 ;	genAssign
   0150 90s01r14            545 	mov	dptr,#_dp_display_array_value_1_1
   0153 E0                  546 	movx	a,@dptr
   0154 FA                  547 	mov	r2,a
   0155 A3                  548 	inc	dptr
   0156 E0                  549 	movx	a,@dptr
   0157 FB                  550 	mov	r3,a
   0158 A3                  551 	inc	dptr
   0159 E0                  552 	movx	a,@dptr
   015A FC                  553 	mov	r4,a
                            554 ;	genAssign
   015B 90s01r12            555 	mov	dptr,#_dp_display_array_PARM_3
   015E E0                  556 	movx	a,@dptr
   015F F5*02               557 	mov	_dp_display_array_sloc1_1_0,a
   0161 A3                  558 	inc	dptr
   0162 E0                  559 	movx	a,@dptr
   0163 F5*03               560 	mov	(_dp_display_array_sloc1_1_0 + 1),a
                            561 ;	genAssign
   0165 90s01r10            562 	mov	dptr,#_dp_display_array_PARM_2
   0168 E0                  563 	movx	a,@dptr
   0169 FF                  564 	mov	r7,a
   016A A3                  565 	inc	dptr
   016B E0                  566 	movx	a,@dptr
   016C F8                  567 	mov	r0,a
   016D                     568 00101$:
                            569 ;	genIpush
                            570 ;	genAssign
   016D 90s01r17            571 	mov	dptr,#_dp_display_array_idx_1_1
   0170 E0                  572 	movx	a,@dptr
   0171 F5*00               573 	mov	_dp_display_array_sloc0_1_0,a
   0173 A3                  574 	inc	dptr
   0174 E0                  575 	movx	a,@dptr
   0175 F5*01               576 	mov	(_dp_display_array_sloc0_1_0 + 1),a
                            577 ;	genAssign
   0177 A9*00               578 	mov	r1,_dp_display_array_sloc0_1_0
   0179 AD*01               579 	mov	r5,(_dp_display_array_sloc0_1_0 + 1)
                            580 ;	genCmpLt
                            581 ;	genCmp
   017B C3                  582 	clr	c
   017C E9                  583 	mov	a,r1
   017D 9F                  584 	subb	a,r7
   017E ED                  585 	mov	a,r5
   017F 98                  586 	subb	a,r0
   0180 E4                  587 	clr	a
   0181 33                  588 	rlc	a
                            589 ;	genIpop
                            590 ;	genIfx
                            591 ;	genIfxJump
   0182 70 03               592 	jnz	00109$
   0184 02s02r19            593 	ljmp	00105$
   0187                     594 00109$:
                    0187    595 	C$misc.c$40$2$2 ==.
                            596 ;	../misc.c:40: dp_display_value(value[bytes-1-idx], descriptive);
                            597 ;	genMinus
                            598 ;	genMinusDec
   0187 EF                  599 	mov	a,r7
   0188 24 FF               600 	add	a,#0xff
   018A F9                  601 	mov	r1,a
   018B E8                  602 	mov	a,r0
   018C 34 FF               603 	addc	a,#0xff
   018E FD                  604 	mov	r5,a
                            605 ;	genMinus
   018F E9                  606 	mov	a,r1
   0190 C3                  607 	clr	c
   0191 95*00               608 	subb	a,_dp_display_array_sloc0_1_0
   0193 F9                  609 	mov	r1,a
   0194 ED                  610 	mov	a,r5
   0195 95*01               611 	subb	a,(_dp_display_array_sloc0_1_0 + 1)
   0197 FD                  612 	mov	r5,a
                            613 ;	genPlus
   0198 E5 01               614 	mov	a,ar1
   019A 25 02               615 	add	a,ar2
   019C F9                  616 	mov	r1,a
   019D E5 05               617 	mov	a,ar5
   019F 35 03               618 	addc	a,ar3
   01A1 FD                  619 	mov	r5,a
   01A2 8C 06               620 	mov	ar6,r4
                            621 ;	genPointerGet
                            622 ;	genGenPointerGet
   01A4 89 82               623 	mov	dpl,r1
   01A6 8D 83               624 	mov	dph,r5
   01A8 8E F0               625 	mov	b,r6
   01AA 12s00r00            626 	lcall	__gptrget
   01AD F9                  627 	mov	r1,a
                            628 ;	genIpush
   01AE C0 02               629 	push	ar2
   01B0 C0 03               630 	push	ar3
   01B2 C0 04               631 	push	ar4
                            632 ;	genCast
   01B4 7D 00               633 	mov	r5,#0x00
   01B6 7E 00               634 	mov	r6,#0x00
   01B8 7A 00               635 	mov	r2,#0x00
                            636 ;	genAssign
   01BA 90s00r08            637 	mov	dptr,#_dp_display_value_PARM_2
   01BD E5*02               638 	mov	a,_dp_display_array_sloc1_1_0
   01BF F0                  639 	movx	@dptr,a
   01C0 A3                  640 	inc	dptr
   01C1 E5*03               641 	mov	a,(_dp_display_array_sloc1_1_0 + 1)
   01C3 F0                  642 	movx	@dptr,a
                            643 ;	genCall
   01C4 89 82               644 	mov	dpl,r1
   01C6 8D 83               645 	mov	dph,r5
   01C8 8E F0               646 	mov	b,r6
   01CA EA                  647 	mov	a,r2
   01CB C0 02               648 	push	ar2
   01CD C0 03               649 	push	ar3
   01CF C0 04               650 	push	ar4
   01D1 C0 07               651 	push	ar7
   01D3 C0 00               652 	push	ar0
   01D5 12s00r7E            653 	lcall	_dp_display_value
   01D8 D0 00               654 	pop	ar0
   01DA D0 07               655 	pop	ar7
   01DC D0 04               656 	pop	ar4
   01DE D0 03               657 	pop	ar3
   01E0 D0 02               658 	pop	ar2
                    01E2    659 	C$misc.c$41$2$2 ==.
                            660 ;	../misc.c:41: dp_display_text(" ");
                            661 ;	genCall
   01E2 75 82r00            662 	mov	dpl,#__str_0
   01E5 75 83s00            663 	mov	dph,#(__str_0 >> 8)
   01E8 75 F0 80            664 	mov	b,#0x80
   01EB C0 02               665 	push	ar2
   01ED C0 03               666 	push	ar3
   01EF C0 04               667 	push	ar4
   01F1 C0 07               668 	push	ar7
   01F3 C0 00               669 	push	ar0
   01F5 12s00r00            670 	lcall	_dp_display_text
   01F8 D0 00               671 	pop	ar0
   01FA D0 07               672 	pop	ar7
   01FC D0 04               673 	pop	ar4
   01FE D0 03               674 	pop	ar3
   0200 D0 02               675 	pop	ar2
                    0202    676 	C$misc.c$38$1$1 ==.
                            677 ;	../misc.c:38: for (idx=0;idx<bytes;idx++)
                            678 ;	genPlus
   0202 90s01r17            679 	mov	dptr,#_dp_display_array_idx_1_1
                            680 ;	genPlusIncr
   0205 74 01               681 	mov	a,#0x01
   0207 25*00               682 	add	a,_dp_display_array_sloc0_1_0
   0209 F0                  683 	movx	@dptr,a
   020A 74 00               684 	mov	a,#0x00
   020C 35*01               685 	addc	a,(_dp_display_array_sloc0_1_0 + 1)
   020E A3                  686 	inc	dptr
   020F F0                  687 	movx	@dptr,a
                            688 ;	genIpop
   0210 D0 04               689 	pop	ar4
   0212 D0 03               690 	pop	ar3
   0214 D0 02               691 	pop	ar2
   0216 02s01r6D            692 	ljmp	00101$
   0219                     693 00105$:
                    0219    694 	C$misc.c$44$1$1 ==.
                    0219    695 	XG$dp_display_array$0$0 ==.
   0219 22                  696 	ret
                            697 ;------------------------------------------------------------
                            698 ;Allocation info for local variables in function 'int_to_hex_int'
                            699 ;------------------------------------------------------------
                            700 ;sloc0                     Allocated with name '_int_to_hex_int_sloc0_1_0'
                            701 ;sloc1                     Allocated with name '_int_to_hex_int_sloc1_1_0'
                            702 ;p_result                  Allocated with name '_int_to_hex_int_PARM_2'
                            703 ;result_size               Allocated with name '_int_to_hex_int_PARM_3'
                            704 ;value                     Allocated with name '_int_to_hex_int_value_1_1'
                            705 ;nibble_idx                Allocated with name '_int_to_hex_int_nibble_idx_1_1'
                            706 ;nb_nibbles                Allocated with name '_int_to_hex_int_nb_nibbles_1_1'
                            707 ;conv_array                Allocated with name '_int_to_hex_int_conv_array_1_1'
                            708 ;uvalue                    Allocated with name '_int_to_hex_int_uvalue_1_1'
                            709 ;nibble                    Allocated with name '_int_to_hex_int_nibble_2_2'
                            710 ;------------------------------------------------------------
                    021A    711 	G$int_to_hex_int$0$0 ==.
                    021A    712 	C$misc.c$49$1$1 ==.
                            713 ;	../misc.c:49: DPUINT int_to_hex_int(DPUINT value, uint8_t * p_result, DPUINT result_size)
                            714 ;	-----------------------------------------
                            715 ;	 function int_to_hex_int
                            716 ;	-----------------------------------------
   021A                     717 _int_to_hex_int:
                            718 ;	genReceive
   021A AA 83               719 	mov	r2,dph
   021C E5 82               720 	mov	a,dpl
   021E 90s01r1E            721 	mov	dptr,#_int_to_hex_int_value_1_1
   0221 F0                  722 	movx	@dptr,a
   0222 A3                  723 	inc	dptr
   0223 EA                  724 	mov	a,r2
   0224 F0                  725 	movx	@dptr,a
                    0225    726 	C$misc.c$54$1$1 ==.
                            727 ;	../misc.c:54: nibble_idx = 0;
                            728 ;	genAssign
   0225 90s01r20            729 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   0228 E4                  730 	clr	a
   0229 F0                  731 	movx	@dptr,a
   022A A3                  732 	inc	dptr
   022B F0                  733 	movx	@dptr,a
                    022C    734 	C$misc.c$55$1$1 ==.
                            735 ;	../misc.c:55: uvalue = (unsigned int)value;
                            736 ;	genAssign
   022C 90s01r1E            737 	mov	dptr,#_int_to_hex_int_value_1_1
   022F E0                  738 	movx	a,@dptr
   0230 FA                  739 	mov	r2,a
   0231 A3                  740 	inc	dptr
   0232 E0                  741 	movx	a,@dptr
   0233 FB                  742 	mov	r3,a
                            743 ;	genAssign
   0234 90s01r2C            744 	mov	dptr,#_int_to_hex_int_uvalue_1_1
   0237 EA                  745 	mov	a,r2
   0238 F0                  746 	movx	@dptr,a
   0239 A3                  747 	inc	dptr
   023A EB                  748 	mov	a,r3
   023B F0                  749 	movx	@dptr,a
                    023C    750 	C$misc.c$57$2$2 ==.
                            751 ;	../misc.c:57: do {
   023C                     752 00105$:
                    023C    753 	C$misc.c$58$2$2 ==.
                            754 ;	../misc.c:58: int nibble = uvalue & 0x0F;
                            755 ;	genAssign
   023C 90s01r2C            756 	mov	dptr,#_int_to_hex_int_uvalue_1_1
   023F E0                  757 	movx	a,@dptr
   0240 FA                  758 	mov	r2,a
   0241 A3                  759 	inc	dptr
   0242 E0                  760 	movx	a,@dptr
   0243 FB                  761 	mov	r3,a
                            762 ;	genAnd
   0244 53 02 0F            763 	anl	ar2,#0x0F
   0247 7B 00               764 	mov	r3,#0x00
                    0249    765 	C$misc.c$60$2$2 ==.
                            766 ;	../misc.c:60: if ( nibble < 10 )
                            767 ;	genAssign
   0249 8A 04               768 	mov	ar4,r2
   024B 8B 05               769 	mov	ar5,r3
                            770 ;	genCmpLt
                            771 ;	genCmp
   024D C3                  772 	clr	c
   024E EC                  773 	mov	a,r4
   024F 94 0A               774 	subb	a,#0x0A
   0251 ED                  775 	mov	a,r5
   0252 64 80               776 	xrl	a,#0x80
   0254 94 80               777 	subb	a,#0x80
                            778 ;	genIfxJump
   0256 40 03               779 	jc	00121$
   0258 02s02r7D            780 	ljmp	00102$
   025B                     781 00121$:
                    025B    782 	C$misc.c$61$2$2 ==.
                            783 ;	../misc.c:61: conv_array[nibble_idx] = nibble + '0';
                            784 ;	genAssign
   025B 90s01r20            785 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   025E E0                  786 	movx	a,@dptr
   025F FC                  787 	mov	r4,a
   0260 A3                  788 	inc	dptr
   0261 E0                  789 	movx	a,@dptr
   0262 FD                  790 	mov	r5,a
                            791 ;	genPlus
   0263 E5 04               792 	mov	a,ar4
   0265 24r24               793 	add	a,#_int_to_hex_int_conv_array_1_1
   0267 F5 82               794 	mov	dpl,a
   0269 E5 05               795 	mov	a,ar5
   026B 34s01               796 	addc	a,#(_int_to_hex_int_conv_array_1_1 >> 8)
   026D F5 83               797 	mov	dph,a
                            798 ;	genAssign
   026F 8A 04               799 	mov	ar4,r2
   0271 8B 05               800 	mov	ar5,r3
                            801 ;	genCast
                            802 ;	genPlus
                            803 ;	genPlusIncr
   0273 74 30               804 	mov	a,#0x30
   0275 25 04               805 	add	a,ar4
   0277 FC                  806 	mov	r4,a
                            807 ;	genPointerSet
                            808 ;     genFarPointerSet
   0278 EC                  809 	mov	a,r4
   0279 F0                  810 	movx	@dptr,a
   027A 02s02r98            811 	ljmp	00103$
   027D                     812 00102$:
                    027D    813 	C$misc.c$63$2$2 ==.
                            814 ;	../misc.c:63: conv_array[nibble_idx] = nibble  - 10 + 'A';
                            815 ;	genAssign
   027D 90s01r20            816 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   0280 E0                  817 	movx	a,@dptr
   0281 FC                  818 	mov	r4,a
   0282 A3                  819 	inc	dptr
   0283 E0                  820 	movx	a,@dptr
   0284 FD                  821 	mov	r5,a
                            822 ;	genPlus
   0285 E5 04               823 	mov	a,ar4
   0287 24r24               824 	add	a,#_int_to_hex_int_conv_array_1_1
   0289 F5 82               825 	mov	dpl,a
   028B E5 05               826 	mov	a,ar5
   028D 34s01               827 	addc	a,#(_int_to_hex_int_conv_array_1_1 >> 8)
   028F F5 83               828 	mov	dph,a
                            829 ;	genAssign
                            830 ;	genCast
                            831 ;	genPlus
                            832 ;	genPlusIncr
   0291 74 37               833 	mov	a,#0x37
   0293 25 02               834 	add	a,ar2
   0295 FA                  835 	mov	r2,a
                            836 ;	genPointerSet
                            837 ;     genFarPointerSet
   0296 EA                  838 	mov	a,r2
   0297 F0                  839 	movx	@dptr,a
   0298                     840 00103$:
                    0298    841 	C$misc.c$64$2$2 ==.
                            842 ;	../misc.c:64: uvalue = (uvalue >> 4);
                            843 ;	genAssign
   0298 90s01r2C            844 	mov	dptr,#_int_to_hex_int_uvalue_1_1
   029B E0                  845 	movx	a,@dptr
   029C FA                  846 	mov	r2,a
   029D A3                  847 	inc	dptr
   029E E0                  848 	movx	a,@dptr
   029F FB                  849 	mov	r3,a
                            850 ;	genRightShift
                            851 ;	genRightShiftLiteral
                            852 ;	genrshTwo
   02A0 EB                  853 	mov	a,r3
   02A1 C4                  854 	swap	a
   02A2 CA                  855 	xch	a,r2
   02A3 C4                  856 	swap	a
   02A4 54 0F               857 	anl	a,#0x0f
   02A6 6A                  858 	xrl	a,r2
   02A7 CA                  859 	xch	a,r2
   02A8 54 0F               860 	anl	a,#0x0f
   02AA CA                  861 	xch	a,r2
   02AB 6A                  862 	xrl	a,r2
   02AC CA                  863 	xch	a,r2
   02AD FB                  864 	mov	r3,a
                            865 ;	genAssign
   02AE 90s01r2C            866 	mov	dptr,#_int_to_hex_int_uvalue_1_1
   02B1 EA                  867 	mov	a,r2
   02B2 F0                  868 	movx	@dptr,a
   02B3 A3                  869 	inc	dptr
   02B4 EB                  870 	mov	a,r3
   02B5 F0                  871 	movx	@dptr,a
                    02B6    872 	C$misc.c$65$2$2 ==.
                            873 ;	../misc.c:65: nibble_idx++;
                            874 ;	genAssign
   02B6 90s01r20            875 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   02B9 E0                  876 	movx	a,@dptr
   02BA FA                  877 	mov	r2,a
   02BB A3                  878 	inc	dptr
   02BC E0                  879 	movx	a,@dptr
   02BD FB                  880 	mov	r3,a
                            881 ;	genPlus
   02BE 90s01r20            882 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
                            883 ;	genPlusIncr
   02C1 74 01               884 	mov	a,#0x01
   02C3 25 02               885 	add	a,ar2
   02C5 F0                  886 	movx	@dptr,a
   02C6 74 00               887 	mov	a,#0x00
   02C8 35 03               888 	addc	a,ar3
   02CA A3                  889 	inc	dptr
   02CB F0                  890 	movx	@dptr,a
                    02CC    891 	C$misc.c$66$1$1 ==.
                            892 ;	../misc.c:66: } while ( ( nibble_idx < NB_NIBBLES_IN_INT ) && ( uvalue > 0 ) );
                            893 ;	genAssign
   02CC 90s01r20            894 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   02CF E0                  895 	movx	a,@dptr
   02D0 FA                  896 	mov	r2,a
   02D1 A3                  897 	inc	dptr
   02D2 E0                  898 	movx	a,@dptr
   02D3 FB                  899 	mov	r3,a
                            900 ;	genCmpLt
                            901 ;	genCmp
   02D4 C3                  902 	clr	c
   02D5 EA                  903 	mov	a,r2
   02D6 94 08               904 	subb	a,#0x08
   02D8 EB                  905 	mov	a,r3
   02D9 64 80               906 	xrl	a,#0x80
   02DB 94 80               907 	subb	a,#0x80
                            908 ;	genIfxJump
   02DD 40 03               909 	jc	00122$
   02DF 02s02rF1            910 	ljmp	00107$
   02E2                     911 00122$:
                            912 ;	genAssign
   02E2 90s01r2C            913 	mov	dptr,#_int_to_hex_int_uvalue_1_1
   02E5 E0                  914 	movx	a,@dptr
   02E6 FA                  915 	mov	r2,a
   02E7 A3                  916 	inc	dptr
   02E8 E0                  917 	movx	a,@dptr
   02E9 FB                  918 	mov	r3,a
                            919 ;	genIfx
   02EA EA                  920 	mov	a,r2
   02EB 4B                  921 	orl	a,r3
                            922 ;	genIfxJump
   02EC 60 03               923 	jz	00123$
   02EE 02s02r3C            924 	ljmp	00105$
   02F1                     925 00123$:
   02F1                     926 00107$:
                    02F1    927 	C$misc.c$68$1$1 ==.
                            928 ;	../misc.c:68: nb_nibbles = nibble_idx;
                            929 ;	genAssign
   02F1 90s01r20            930 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   02F4 E0                  931 	movx	a,@dptr
   02F5 FA                  932 	mov	r2,a
   02F6 A3                  933 	inc	dptr
   02F7 E0                  934 	movx	a,@dptr
   02F8 FB                  935 	mov	r3,a
                            936 ;	genAssign
   02F9 90s01r22            937 	mov	dptr,#_int_to_hex_int_nb_nibbles_1_1
   02FC EA                  938 	mov	a,r2
   02FD F0                  939 	movx	@dptr,a
   02FE A3                  940 	inc	dptr
   02FF EB                  941 	mov	a,r3
   0300 F0                  942 	movx	@dptr,a
                    0301    943 	C$misc.c$69$1$1 ==.
                            944 ;	../misc.c:69: for ( nibble_idx = 0; (nibble_idx < nb_nibbles) && (nibble_idx < result_size) ;nibble_idx++ )
                            945 ;	genAssign
   0301 90s01r20            946 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   0304 E4                  947 	clr	a
   0305 F0                  948 	movx	@dptr,a
   0306 A3                  949 	inc	dptr
   0307 F0                  950 	movx	@dptr,a
                            951 ;	genAssign
   0308 90s01r1C            952 	mov	dptr,#_int_to_hex_int_PARM_3
   030B E0                  953 	movx	a,@dptr
   030C FA                  954 	mov	r2,a
   030D A3                  955 	inc	dptr
   030E E0                  956 	movx	a,@dptr
   030F FB                  957 	mov	r3,a
                            958 ;	genAssign
   0310 90s01r19            959 	mov	dptr,#_int_to_hex_int_PARM_2
   0313 E0                  960 	movx	a,@dptr
   0314 FC                  961 	mov	r4,a
   0315 A3                  962 	inc	dptr
   0316 E0                  963 	movx	a,@dptr
   0317 FD                  964 	mov	r5,a
   0318 A3                  965 	inc	dptr
   0319 E0                  966 	movx	a,@dptr
   031A FE                  967 	mov	r6,a
                            968 ;	genAssign
   031B 90s01r22            969 	mov	dptr,#_int_to_hex_int_nb_nibbles_1_1
   031E E0                  970 	movx	a,@dptr
   031F FF                  971 	mov	r7,a
   0320 A3                  972 	inc	dptr
   0321 E0                  973 	movx	a,@dptr
   0322 F8                  974 	mov	r0,a
   0323                     975 00109$:
                            976 ;	genAssign
   0323 90s01r20            977 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   0326 E0                  978 	movx	a,@dptr
   0327 F5*04               979 	mov	_int_to_hex_int_sloc0_1_0,a
   0329 A3                  980 	inc	dptr
   032A E0                  981 	movx	a,@dptr
   032B F5*05               982 	mov	(_int_to_hex_int_sloc0_1_0 + 1),a
                            983 ;	genCmpLt
                            984 ;	genCmp
   032D C3                  985 	clr	c
   032E E5*04               986 	mov	a,_int_to_hex_int_sloc0_1_0
   0330 9F                  987 	subb	a,r7
   0331 E5*05               988 	mov	a,(_int_to_hex_int_sloc0_1_0 + 1)
   0333 64 80               989 	xrl	a,#0x80
   0335 88 F0               990 	mov	b,r0
   0337 63 F0 80            991 	xrl	b,#0x80
   033A 95 F0               992 	subb	a,b
                            993 ;	genIfxJump
   033C 40 03               994 	jc	00124$
   033E 02s03rA6            995 	ljmp	00112$
   0341                     996 00124$:
                            997 ;	genIpush
   0341 C0 04               998 	push	ar4
   0343 C0 05               999 	push	ar5
   0345 C0 06              1000 	push	ar6
                           1001 ;	genAssign
   0347 A9*04              1002 	mov	r1,_int_to_hex_int_sloc0_1_0
   0349 AC*05              1003 	mov	r4,(_int_to_hex_int_sloc0_1_0 + 1)
                           1004 ;	genCmpLt
                           1005 ;	genCmp
   034B C3                 1006 	clr	c
   034C E9                 1007 	mov	a,r1
   034D 9A                 1008 	subb	a,r2
   034E EC                 1009 	mov	a,r4
   034F 9B                 1010 	subb	a,r3
   0350 E4                 1011 	clr	a
   0351 33                 1012 	rlc	a
                           1013 ;	genIpop
   0352 D0 06              1014 	pop	ar6
   0354 D0 05              1015 	pop	ar5
   0356 D0 04              1016 	pop	ar4
                           1017 ;	genIfx
                           1018 ;	genIfxJump
   0358 70 03              1019 	jnz	00125$
   035A 02s03rA6           1020 	ljmp	00112$
   035D                    1021 00125$:
                    035D   1022 	C$misc.c$71$1$1 ==.
                           1023 ;	../misc.c:71: p_result[nibble_idx] = conv_array[nb_nibbles - nibble_idx - 1];
                           1024 ;	genIpush
   035D C0 02              1025 	push	ar2
   035F C0 03              1026 	push	ar3
                           1027 ;	genPlus
   0361 E5*04              1028 	mov	a,_int_to_hex_int_sloc0_1_0
   0363 25 04              1029 	add	a,ar4
   0365 F5*06              1030 	mov	_int_to_hex_int_sloc1_1_0,a
   0367 E5*05              1031 	mov	a,(_int_to_hex_int_sloc0_1_0 + 1)
   0369 35 05              1032 	addc	a,ar5
   036B F5*07              1033 	mov	(_int_to_hex_int_sloc1_1_0 + 1),a
   036D 8E*08              1034 	mov	(_int_to_hex_int_sloc1_1_0 + 2),r6
                           1035 ;	genCast
   036F 8F 02              1036 	mov	ar2,r7
                           1037 ;	genCast
   0371 AB*04              1038 	mov	r3,_int_to_hex_int_sloc0_1_0
                           1039 ;	genMinus
   0373 EA                 1040 	mov	a,r2
   0374 C3                 1041 	clr	c
   0375 95 03              1042 	subb	a,ar3
                           1043 ;	genMinus
                           1044 ;	genMinusDec
   0377 14                 1045 	dec	a
                           1046 ;	genPlus
   0378 24r24              1047 	add	a,#_int_to_hex_int_conv_array_1_1
   037A F5 82              1048 	mov	dpl,a
   037C 74s01              1049 	mov	a,#(_int_to_hex_int_conv_array_1_1 >> 8)
   037E 34 00              1050 	addc	a,#0x00
   0380 F5 83              1051 	mov	dph,a
                           1052 ;	genPointerGet
                           1053 ;	genFarPointerGet
   0382 E0                 1054 	movx	a,@dptr
   0383 FA                 1055 	mov	r2,a
                           1056 ;	genPointerSet
                           1057 ;	genGenPointerSet
   0384 85*06 82           1058 	mov	dpl,_int_to_hex_int_sloc1_1_0
   0387 85*07 83           1059 	mov	dph,(_int_to_hex_int_sloc1_1_0 + 1)
   038A 85*08 F0           1060 	mov	b,(_int_to_hex_int_sloc1_1_0 + 2)
   038D EA                 1061 	mov	a,r2
   038E 12s00r00           1062 	lcall	__gptrput
                    0391   1063 	C$misc.c$69$1$1 ==.
                           1064 ;	../misc.c:69: for ( nibble_idx = 0; (nibble_idx < nb_nibbles) && (nibble_idx < result_size) ;nibble_idx++ )
                           1065 ;	genPlus
   0391 90s01r20           1066 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
                           1067 ;	genPlusIncr
   0394 74 01              1068 	mov	a,#0x01
   0396 25*04              1069 	add	a,_int_to_hex_int_sloc0_1_0
   0398 F0                 1070 	movx	@dptr,a
   0399 74 00              1071 	mov	a,#0x00
   039B 35*05              1072 	addc	a,(_int_to_hex_int_sloc0_1_0 + 1)
   039D A3                 1073 	inc	dptr
   039E F0                 1074 	movx	@dptr,a
                           1075 ;	genIpop
   039F D0 03              1076 	pop	ar3
   03A1 D0 02              1077 	pop	ar2
   03A3 02s03r23           1078 	ljmp	00109$
   03A6                    1079 00112$:
                    03A6   1080 	C$misc.c$73$1$1 ==.
                           1081 ;	../misc.c:73: return nibble_idx;
                           1082 ;	genAssign
   03A6 90s01r20           1083 	mov	dptr,#_int_to_hex_int_nibble_idx_1_1
   03A9 E0                 1084 	movx	a,@dptr
   03AA FA                 1085 	mov	r2,a
   03AB A3                 1086 	inc	dptr
   03AC E0                 1087 	movx	a,@dptr
   03AD FB                 1088 	mov	r3,a
                           1089 ;	genRet
   03AE 8A 82              1090 	mov	dpl,r2
   03B0 8B 83              1091 	mov	dph,r3
   03B2                    1092 00113$:
                    03B2   1093 	C$misc.c$74$1$1 ==.
                    03B2   1094 	XG$int_to_hex_int$0$0 ==.
   03B2 22                 1095 	ret
                           1096 ;------------------------------------------------------------
                           1097 ;Allocation info for local variables in function 'int_to_dec_int'
                           1098 ;------------------------------------------------------------
                           1099 ;sloc0                     Allocated with name '_int_to_dec_int_sloc0_1_0'
                           1100 ;p_result                  Allocated with name '_int_to_dec_int_PARM_2'
                           1101 ;value                     Allocated with name '_int_to_dec_int_value_1_1'
                           1102 ;conv_array                Allocated with name '_int_to_dec_int_conv_array_1_1'
                           1103 ;uvalue                    Allocated with name '_int_to_dec_int_uvalue_1_1'
                           1104 ;remainder                 Allocated with name '_int_to_dec_int_remainder_1_1'
                           1105 ;digit_idx                 Allocated with name '_int_to_dec_int_digit_idx_1_1'
                           1106 ;nb_digits                 Allocated with name '_int_to_dec_int_nb_digits_1_1'
                           1107 ;------------------------------------------------------------
                    03B3   1108 	G$int_to_dec_int$0$0 ==.
                    03B3   1109 	C$misc.c$76$1$1 ==.
                           1110 ;	../misc.c:76: DPUINT int_to_dec_int(DPUINT value, uint8_t * p_result)
                           1111 ;	-----------------------------------------
                           1112 ;	 function int_to_dec_int
                           1113 ;	-----------------------------------------
   03B3                    1114 _int_to_dec_int:
                           1115 ;	genReceive
   03B3 AA 83              1116 	mov	r2,dph
   03B5 E5 82              1117 	mov	a,dpl
   03B7 90s01r31           1118 	mov	dptr,#_int_to_dec_int_value_1_1
   03BA F0                 1119 	movx	@dptr,a
   03BB A3                 1120 	inc	dptr
   03BC EA                 1121 	mov	a,r2
   03BD F0                 1122 	movx	@dptr,a
                    03BE   1123 	C$misc.c$84$1$1 ==.
                           1124 ;	../misc.c:84: uvalue = (unsigned int)value;
                           1125 ;	genAssign
   03BE 90s01r31           1126 	mov	dptr,#_int_to_dec_int_value_1_1
   03C1 E0                 1127 	movx	a,@dptr
   03C2 FA                 1128 	mov	r2,a
   03C3 A3                 1129 	inc	dptr
   03C4 E0                 1130 	movx	a,@dptr
   03C5 FB                 1131 	mov	r3,a
                           1132 ;	genAssign
   03C6 90s01r3B           1133 	mov	dptr,#_int_to_dec_int_uvalue_1_1
   03C9 EA                 1134 	mov	a,r2
   03CA F0                 1135 	movx	@dptr,a
   03CB A3                 1136 	inc	dptr
   03CC EB                 1137 	mov	a,r3
   03CD F0                 1138 	movx	@dptr,a
                    03CE   1139 	C$misc.c$85$1$1 ==.
                           1140 ;	../misc.c:85: digit_idx=0;
                           1141 ;	genAssign
   03CE 90s01r3D           1142 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
   03D1 E4                 1143 	clr	a
   03D2 F0                 1144 	movx	@dptr,a
   03D3 A3                 1145 	inc	dptr
   03D4 F0                 1146 	movx	@dptr,a
                    03D5   1147 	C$misc.c$86$1$1 ==.
                           1148 ;	../misc.c:86: if (uvalue)
                           1149 ;	genIfx
   03D5 EA                 1150 	mov	a,r2
   03D6 4B                 1151 	orl	a,r3
                           1152 ;	genIfxJump
   03D7 70 03              1153 	jnz	00117$
   03D9 02s04r58           1154 	ljmp	00105$
   03DC                    1155 00117$:
                    03DC   1156 	C$misc.c$88$3$3 ==.
                           1157 ;	../misc.c:88: while (uvalue)
   03DC                    1158 00101$:
                           1159 ;	genAssign
   03DC 90s01r3B           1160 	mov	dptr,#_int_to_dec_int_uvalue_1_1
   03DF E0                 1161 	movx	a,@dptr
   03E0 FA                 1162 	mov	r2,a
   03E1 A3                 1163 	inc	dptr
   03E2 E0                 1164 	movx	a,@dptr
   03E3 FB                 1165 	mov	r3,a
                           1166 ;	genIfx
   03E4 EA                 1167 	mov	a,r2
   03E5 4B                 1168 	orl	a,r3
                           1169 ;	genIfxJump
   03E6 70 03              1170 	jnz	00118$
   03E8 02s04r67           1171 	ljmp	00106$
   03EB                    1172 00118$:
                    03EB   1173 	C$misc.c$90$1$1 ==.
                           1174 ;	../misc.c:90: remainder = uvalue % 10;
                           1175 ;	genAssign
   03EB 90s00r00           1176 	mov	dptr,#__moduint_PARM_2
   03EE 74 0A              1177 	mov	a,#0x0A
   03F0 F0                 1178 	movx	@dptr,a
   03F1 E4                 1179 	clr	a
   03F2 A3                 1180 	inc	dptr
   03F3 F0                 1181 	movx	@dptr,a
                    03F4   1182 	C$misc.c$91$1$1 ==.
                           1183 ;	../misc.c:91: conv_array[digit_idx] = remainder + '0';
                           1184 ;	genCall
   03F4 8A 82              1185 	mov	dpl,r2
   03F6 8B 83              1186 	mov	dph,r3
   03F8 C0 02              1187 	push	ar2
   03FA C0 03              1188 	push	ar3
   03FC 12s00r00           1189 	lcall	__moduint
   03FF AC 82              1190 	mov	r4,dpl
   0401 AD 83              1191 	mov	r5,dph
   0403 D0 03              1192 	pop	ar3
   0405 D0 02              1193 	pop	ar2
                           1194 ;	genAssign
   0407 90s01r3D           1195 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
   040A E0                 1196 	movx	a,@dptr
   040B FE                 1197 	mov	r6,a
   040C A3                 1198 	inc	dptr
   040D E0                 1199 	movx	a,@dptr
   040E FF                 1200 	mov	r7,a
                           1201 ;	genPlus
   040F E5 06              1202 	mov	a,ar6
   0411 24r33              1203 	add	a,#_int_to_dec_int_conv_array_1_1
   0413 F5 82              1204 	mov	dpl,a
   0415 E5 07              1205 	mov	a,ar7
   0417 34s01              1206 	addc	a,#(_int_to_dec_int_conv_array_1_1 >> 8)
   0419 F5 83              1207 	mov	dph,a
                           1208 ;	genCast
                           1209 ;	genPlus
                           1210 ;	genPlusIncr
   041B 74 30              1211 	mov	a,#0x30
   041D 25 04              1212 	add	a,ar4
   041F FC                 1213 	mov	r4,a
                           1214 ;	genPointerSet
                           1215 ;     genFarPointerSet
   0420 EC                 1216 	mov	a,r4
   0421 F0                 1217 	movx	@dptr,a
                    0422   1218 	C$misc.c$92$1$1 ==.
                           1219 ;	../misc.c:92: uvalue /= 10;
                           1220 ;	genAssign
   0422 90s00r00           1221 	mov	dptr,#__divuint_PARM_2
   0425 74 0A              1222 	mov	a,#0x0A
   0427 F0                 1223 	movx	@dptr,a
   0428 E4                 1224 	clr	a
   0429 A3                 1225 	inc	dptr
   042A F0                 1226 	movx	@dptr,a
                           1227 ;	genCall
   042B 8A 82              1228 	mov	dpl,r2
   042D 8B 83              1229 	mov	dph,r3
   042F C0 06              1230 	push	ar6
   0431 C0 07              1231 	push	ar7
   0433 12s00r00           1232 	lcall	__divuint
   0436 E5 82              1233 	mov	a,dpl
   0438 85 83 F0           1234 	mov	b,dph
   043B D0 07              1235 	pop	ar7
   043D D0 06              1236 	pop	ar6
                           1237 ;	genAssign
   043F 90s01r3B           1238 	mov	dptr,#_int_to_dec_int_uvalue_1_1
   0442 F0                 1239 	movx	@dptr,a
   0443 A3                 1240 	inc	dptr
   0444 E5 F0              1241 	mov	a,b
   0446 F0                 1242 	movx	@dptr,a
                    0447   1243 	C$misc.c$93$3$3 ==.
                           1244 ;	../misc.c:93: digit_idx++;
                           1245 ;	genPlus
   0447 90s01r3D           1246 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
                           1247 ;	genPlusIncr
   044A 74 01              1248 	mov	a,#0x01
   044C 25 06              1249 	add	a,ar6
   044E F0                 1250 	movx	@dptr,a
   044F 74 00              1251 	mov	a,#0x00
   0451 35 07              1252 	addc	a,ar7
   0453 A3                 1253 	inc	dptr
   0454 F0                 1254 	movx	@dptr,a
   0455 02s03rDC           1255 	ljmp	00101$
   0458                    1256 00105$:
                    0458   1257 	C$misc.c$98$2$4 ==.
                           1258 ;	../misc.c:98: conv_array[digit_idx] = '0';
                           1259 ;	genPointerSet
                           1260 ;     genFarPointerSet
   0458 90s01r33           1261 	mov	dptr,#_int_to_dec_int_conv_array_1_1
   045B 74 30              1262 	mov	a,#0x30
   045D F0                 1263 	movx	@dptr,a
                    045E   1264 	C$misc.c$99$2$4 ==.
                           1265 ;	../misc.c:99: digit_idx++;
                           1266 ;	genAssign
   045E 90s01r3D           1267 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
   0461 74 01              1268 	mov	a,#0x01
   0463 F0                 1269 	movx	@dptr,a
   0464 E4                 1270 	clr	a
   0465 A3                 1271 	inc	dptr
   0466 F0                 1272 	movx	@dptr,a
   0467                    1273 00106$:
                    0467   1274 	C$misc.c$103$1$1 ==.
                           1275 ;	../misc.c:103: nb_digits = digit_idx;
                           1276 ;	genAssign
   0467 90s01r3D           1277 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
   046A E0                 1278 	movx	a,@dptr
   046B FA                 1279 	mov	r2,a
   046C A3                 1280 	inc	dptr
   046D E0                 1281 	movx	a,@dptr
   046E FB                 1282 	mov	r3,a
                           1283 ;	genAssign
   046F 90s01r3F           1284 	mov	dptr,#_int_to_dec_int_nb_digits_1_1
   0472 EA                 1285 	mov	a,r2
   0473 F0                 1286 	movx	@dptr,a
   0474 A3                 1287 	inc	dptr
   0475 EB                 1288 	mov	a,r3
   0476 F0                 1289 	movx	@dptr,a
                    0477   1290 	C$misc.c$104$1$1 ==.
                           1291 ;	../misc.c:104: for ( digit_idx = 0; (digit_idx < nb_digits); digit_idx++ )
                           1292 ;	genAssign
   0477 90s01r3D           1293 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
   047A E4                 1294 	clr	a
   047B F0                 1295 	movx	@dptr,a
   047C A3                 1296 	inc	dptr
   047D F0                 1297 	movx	@dptr,a
                           1298 ;	genAssign
   047E 90s01r2E           1299 	mov	dptr,#_int_to_dec_int_PARM_2
   0481 E0                 1300 	movx	a,@dptr
   0482 F5*09              1301 	mov	_int_to_dec_int_sloc0_1_0,a
   0484 A3                 1302 	inc	dptr
   0485 E0                 1303 	movx	a,@dptr
   0486 F5*0A              1304 	mov	(_int_to_dec_int_sloc0_1_0 + 1),a
   0488 A3                 1305 	inc	dptr
   0489 E0                 1306 	movx	a,@dptr
   048A F5*0B              1307 	mov	(_int_to_dec_int_sloc0_1_0 + 2),a
                           1308 ;	genAssign
   048C 90s01r3F           1309 	mov	dptr,#_int_to_dec_int_nb_digits_1_1
   048F E0                 1310 	movx	a,@dptr
   0490 FD                 1311 	mov	r5,a
   0491 A3                 1312 	inc	dptr
   0492 E0                 1313 	movx	a,@dptr
   0493 FE                 1314 	mov	r6,a
   0494                    1315 00107$:
                           1316 ;	genAssign
   0494 90s01r3D           1317 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
   0497 E0                 1318 	movx	a,@dptr
   0498 FF                 1319 	mov	r7,a
   0499 A3                 1320 	inc	dptr
   049A E0                 1321 	movx	a,@dptr
   049B F8                 1322 	mov	r0,a
                           1323 ;	genCmpLt
                           1324 ;	genCmp
   049C C3                 1325 	clr	c
   049D EF                 1326 	mov	a,r7
   049E 9D                 1327 	subb	a,r5
   049F E8                 1328 	mov	a,r0
   04A0 9E                 1329 	subb	a,r6
                           1330 ;	genIfxJump
   04A1 40 03              1331 	jc	00119$
   04A3 02s04rEA           1332 	ljmp	00110$
   04A6                    1333 00119$:
                    04A6   1334 	C$misc.c$106$2$5 ==.
                           1335 ;	../misc.c:106: p_result[digit_idx] = conv_array[nb_digits - digit_idx - 1];
                           1336 ;	genPlus
   04A6 E5 07              1337 	mov	a,ar7
   04A8 25*09              1338 	add	a,_int_to_dec_int_sloc0_1_0
   04AA F9                 1339 	mov	r1,a
   04AB E5 00              1340 	mov	a,ar0
   04AD 35*0A              1341 	addc	a,(_int_to_dec_int_sloc0_1_0 + 1)
   04AF FA                 1342 	mov	r2,a
   04B0 AB*0B              1343 	mov	r3,(_int_to_dec_int_sloc0_1_0 + 2)
                           1344 ;	genCast
   04B2 8D 04              1345 	mov	ar4,r5
                           1346 ;	genIpush
   04B4 C0 05              1347 	push	ar5
   04B6 C0 06              1348 	push	ar6
                           1349 ;	genCast
   04B8 8F 05              1350 	mov	ar5,r7
                           1351 ;	genMinus
   04BA EC                 1352 	mov	a,r4
   04BB C3                 1353 	clr	c
   04BC 95 05              1354 	subb	a,ar5
                           1355 ;	genMinus
                           1356 ;	genMinusDec
   04BE 14                 1357 	dec	a
                           1358 ;	genPlus
   04BF 24r33              1359 	add	a,#_int_to_dec_int_conv_array_1_1
   04C1 F5 82              1360 	mov	dpl,a
   04C3 74s01              1361 	mov	a,#(_int_to_dec_int_conv_array_1_1 >> 8)
   04C5 34 00              1362 	addc	a,#0x00
   04C7 F5 83              1363 	mov	dph,a
                           1364 ;	genPointerGet
                           1365 ;	genFarPointerGet
   04C9 E0                 1366 	movx	a,@dptr
   04CA FC                 1367 	mov	r4,a
                           1368 ;	genPointerSet
                           1369 ;	genGenPointerSet
   04CB 89 82              1370 	mov	dpl,r1
   04CD 8A 83              1371 	mov	dph,r2
   04CF 8B F0              1372 	mov	b,r3
   04D1 EC                 1373 	mov	a,r4
   04D2 12s00r00           1374 	lcall	__gptrput
                    04D5   1375 	C$misc.c$104$1$1 ==.
                           1376 ;	../misc.c:104: for ( digit_idx = 0; (digit_idx < nb_digits); digit_idx++ )
                           1377 ;	genPlus
   04D5 90s01r3D           1378 	mov	dptr,#_int_to_dec_int_digit_idx_1_1
                           1379 ;	genPlusIncr
   04D8 74 01              1380 	mov	a,#0x01
   04DA 25 07              1381 	add	a,ar7
   04DC F0                 1382 	movx	@dptr,a
   04DD 74 00              1383 	mov	a,#0x00
   04DF 35 00              1384 	addc	a,ar0
   04E1 A3                 1385 	inc	dptr
   04E2 F0                 1386 	movx	@dptr,a
                           1387 ;	genIpop
   04E3 D0 06              1388 	pop	ar6
   04E5 D0 05              1389 	pop	ar5
   04E7 02s04r94           1390 	ljmp	00107$
   04EA                    1391 00110$:
                    04EA   1392 	C$misc.c$108$1$1 ==.
                           1393 ;	../misc.c:108: return digit_idx;
                           1394 ;	genRet
   04EA 8F 82              1395 	mov	dpl,r7
   04EC 88 83              1396 	mov	dph,r0
   04EE                    1397 00111$:
                    04EE   1398 	C$misc.c$109$1$1 ==.
                    04EE   1399 	XG$int_to_dec_int$0$0 ==.
   04EE 22                 1400 	ret
                           1401 ;------------------------------------------------------------
                           1402 ;Allocation info for local variables in function 'xatoi'
                           1403 ;------------------------------------------------------------
                           1404 ;sloc0                     Allocated with name '_xatoi_sloc0_1_0'
                           1405 ;res                       Allocated with name '_xatoi_PARM_2'
                           1406 ;str                       Allocated with name '_xatoi_str_1_1'
                           1407 ;val                       Allocated with name '_xatoi_val_1_1'
                           1408 ;c                         Allocated with name '_xatoi_c_1_1'
                           1409 ;r                         Allocated with name '_xatoi_r_1_1'
                           1410 ;s                         Allocated with name '_xatoi_s_1_1'
                           1411 ;------------------------------------------------------------
                    04EF   1412 	G$xatoi$0$0 ==.
                    04EF   1413 	C$misc.c$116$1$1 ==.
                           1414 ;	../misc.c:116: int xatoi (                                             /* 0:Failed, 1:Successful */
                           1415 ;	-----------------------------------------
                           1416 ;	 function xatoi
                           1417 ;	-----------------------------------------
   04EF                    1418 _xatoi:
                           1419 ;	genReceive
   04EF AA F0              1420 	mov	r2,b
   04F1 AB 83              1421 	mov	r3,dph
   04F3 E5 82              1422 	mov	a,dpl
   04F5 90s01r44           1423 	mov	dptr,#_xatoi_str_1_1
   04F8 F0                 1424 	movx	@dptr,a
   04F9 A3                 1425 	inc	dptr
   04FA EB                 1426 	mov	a,r3
   04FB F0                 1427 	movx	@dptr,a
   04FC A3                 1428 	inc	dptr
   04FD EA                 1429 	mov	a,r2
   04FE F0                 1430 	movx	@dptr,a
                    04FF   1431 	C$misc.c$122$1$1 ==.
                           1432 ;	../misc.c:122: unsigned char c, r, s = 0;
                           1433 ;	genAssign
   04FF 90s01r4D           1434 	mov	dptr,#_xatoi_s_1_1
   0502 74 00              1435 	mov	a,#0x00
   0504 F0                 1436 	movx	@dptr,a
                    0505   1437 	C$misc.c$125$1$1 ==.
                           1438 ;	../misc.c:125: *res = 0;
                           1439 ;	genAssign
   0505 90s01r41           1440 	mov	dptr,#_xatoi_PARM_2
   0508 E0                 1441 	movx	a,@dptr
   0509 FA                 1442 	mov	r2,a
   050A A3                 1443 	inc	dptr
   050B E0                 1444 	movx	a,@dptr
   050C FB                 1445 	mov	r3,a
   050D A3                 1446 	inc	dptr
   050E E0                 1447 	movx	a,@dptr
   050F FC                 1448 	mov	r4,a
                           1449 ;	genPointerSet
                           1450 ;	genGenPointerSet
   0510 8A 82              1451 	mov	dpl,r2
   0512 8B 83              1452 	mov	dph,r3
   0514 8C F0              1453 	mov	b,r4
   0516 74 00              1454 	mov	a,#0x00
   0518 12s00r00           1455 	lcall	__gptrput
   051B A3                 1456 	inc	dptr
   051C 74 00              1457 	mov	a,#0x00
   051E 12s00r00           1458 	lcall	__gptrput
                    0521   1459 	C$misc.c$127$1$1 ==.
                           1460 ;	../misc.c:127: while ((c = **str) == ' ') (*str)++;               /* Skip leading spaces */
   0521                    1461 00101$:
                           1462 ;	genIpush
   0521 C0 02              1463 	push	ar2
   0523 C0 03              1464 	push	ar3
   0525 C0 04              1465 	push	ar4
                           1466 ;	genAssign
   0527 90s01r44           1467 	mov	dptr,#_xatoi_str_1_1
   052A E0                 1468 	movx	a,@dptr
   052B FD                 1469 	mov	r5,a
   052C A3                 1470 	inc	dptr
   052D E0                 1471 	movx	a,@dptr
   052E FE                 1472 	mov	r6,a
   052F A3                 1473 	inc	dptr
   0530 E0                 1474 	movx	a,@dptr
   0531 FF                 1475 	mov	r7,a
                           1476 ;	genPointerGet
                           1477 ;	genGenPointerGet
   0532 8D 82              1478 	mov	dpl,r5
   0534 8E 83              1479 	mov	dph,r6
   0536 8F F0              1480 	mov	b,r7
   0538 12s00r00           1481 	lcall	__gptrget
   053B F8                 1482 	mov	r0,a
   053C A3                 1483 	inc	dptr
   053D 12s00r00           1484 	lcall	__gptrget
   0540 F9                 1485 	mov	r1,a
   0541 A3                 1486 	inc	dptr
   0542 12s00r00           1487 	lcall	__gptrget
   0545 FA                 1488 	mov	r2,a
                           1489 ;	genPointerGet
                           1490 ;	genGenPointerGet
   0546 88 82              1491 	mov	dpl,r0
   0548 89 83              1492 	mov	dph,r1
   054A 8A F0              1493 	mov	b,r2
   054C 12s00r00           1494 	lcall	__gptrget
   054F F8                 1495 	mov	r0,a
                           1496 ;	genAssign
   0550 90s01r4B           1497 	mov	dptr,#_xatoi_c_1_1
   0553 E8                 1498 	mov	a,r0
   0554 F0                 1499 	movx	@dptr,a
                           1500 ;	genCmpEq
                           1501 ;	gencjne
                           1502 ;	gencjneshort
   0555 B8 20 04           1503 	cjne	r0,#0x20,00155$
   0558 74 01              1504 	mov	a,#0x01
   055A 80 01              1505 	sjmp	00156$
   055C                    1506 00155$:
   055C E4                 1507 	clr	a
   055D                    1508 00156$:
                           1509 ;	genIpop
   055D D0 04              1510 	pop	ar4
   055F D0 03              1511 	pop	ar3
   0561 D0 02              1512 	pop	ar2
                           1513 ;	genIfx
                           1514 ;	genIfxJump
   0563 70 03              1515 	jnz	00157$
   0565 02s05rA4           1516 	ljmp	00103$
   0568                    1517 00157$:
                           1518 ;	genIpush
   0568 C0 02              1519 	push	ar2
   056A C0 03              1520 	push	ar3
   056C C0 04              1521 	push	ar4
                           1522 ;	genPointerGet
                           1523 ;	genGenPointerGet
   056E 8D 82              1524 	mov	dpl,r5
   0570 8E 83              1525 	mov	dph,r6
   0572 8F F0              1526 	mov	b,r7
   0574 12s00r00           1527 	lcall	__gptrget
   0577 F8                 1528 	mov	r0,a
   0578 A3                 1529 	inc	dptr
   0579 12s00r00           1530 	lcall	__gptrget
   057C F9                 1531 	mov	r1,a
   057D A3                 1532 	inc	dptr
   057E 12s00r00           1533 	lcall	__gptrget
   0581 FA                 1534 	mov	r2,a
                           1535 ;	genPlus
                           1536 ;	genPlusIncr
   0582 08                 1537 	inc	r0
   0583 B8 00 01           1538 	cjne	r0,#0x00,00158$
   0586 09                 1539 	inc	r1
   0587                    1540 00158$:
                           1541 ;	genPointerSet
                           1542 ;	genGenPointerSet
   0587 8D 82              1543 	mov	dpl,r5
   0589 8E 83              1544 	mov	dph,r6
   058B 8F F0              1545 	mov	b,r7
   058D E8                 1546 	mov	a,r0
   058E 12s00r00           1547 	lcall	__gptrput
   0591 A3                 1548 	inc	dptr
   0592 E9                 1549 	mov	a,r1
   0593 12s00r00           1550 	lcall	__gptrput
   0596 A3                 1551 	inc	dptr
   0597 EA                 1552 	mov	a,r2
   0598 12s00r00           1553 	lcall	__gptrput
                           1554 ;	genIpop
   059B D0 04              1555 	pop	ar4
   059D D0 03              1556 	pop	ar3
   059F D0 02              1557 	pop	ar2
   05A1 02s05r21           1558 	ljmp	00101$
   05A4                    1559 00103$:
                    05A4   1560 	C$misc.c$129$1$1 ==.
                           1561 ;	../misc.c:129: if (c == '-') {                         /* negative? */
                           1562 ;	genCmpEq
                           1563 ;	gencjneshort
   05A4 B8 2D 02           1564 	cjne	r0,#0x2D,00159$
   05A7 80 03              1565 	sjmp	00160$
   05A9                    1566 00159$:
   05A9 02s05rFA           1567 	ljmp	00105$
   05AC                    1568 00160$:
                    05AC   1569 	C$misc.c$130$1$1 ==.
                           1570 ;	../misc.c:130: s = 1;
                           1571 ;	genIpush
   05AC C0 02              1572 	push	ar2
   05AE C0 03              1573 	push	ar3
   05B0 C0 04              1574 	push	ar4
                           1575 ;	genAssign
   05B2 90s01r4D           1576 	mov	dptr,#_xatoi_s_1_1
   05B5 74 01              1577 	mov	a,#0x01
   05B7 F0                 1578 	movx	@dptr,a
                    05B8   1579 	C$misc.c$131$2$2 ==.
                           1580 ;	../misc.c:131: c = *(++(*str));
                           1581 ;	genPointerGet
                           1582 ;	genGenPointerGet
   05B8 8D 82              1583 	mov	dpl,r5
   05BA 8E 83              1584 	mov	dph,r6
   05BC 8F F0              1585 	mov	b,r7
   05BE 12s00r00           1586 	lcall	__gptrget
   05C1 F8                 1587 	mov	r0,a
   05C2 A3                 1588 	inc	dptr
   05C3 12s00r00           1589 	lcall	__gptrget
   05C6 F9                 1590 	mov	r1,a
   05C7 A3                 1591 	inc	dptr
   05C8 12s00r00           1592 	lcall	__gptrget
   05CB FA                 1593 	mov	r2,a
                           1594 ;	genPlus
                           1595 ;	genPlusIncr
   05CC 08                 1596 	inc	r0
   05CD B8 00 01           1597 	cjne	r0,#0x00,00161$
   05D0 09                 1598 	inc	r1
   05D1                    1599 00161$:
                           1600 ;	genPointerSet
                           1601 ;	genGenPointerSet
   05D1 8D 82              1602 	mov	dpl,r5
   05D3 8E 83              1603 	mov	dph,r6
   05D5 8F F0              1604 	mov	b,r7
   05D7 E8                 1605 	mov	a,r0
   05D8 12s00r00           1606 	lcall	__gptrput
   05DB A3                 1607 	inc	dptr
   05DC E9                 1608 	mov	a,r1
   05DD 12s00r00           1609 	lcall	__gptrput
   05E0 A3                 1610 	inc	dptr
   05E1 EA                 1611 	mov	a,r2
   05E2 12s00r00           1612 	lcall	__gptrput
                           1613 ;	genPointerGet
                           1614 ;	genGenPointerGet
   05E5 88 82              1615 	mov	dpl,r0
   05E7 89 83              1616 	mov	dph,r1
   05E9 8A F0              1617 	mov	b,r2
   05EB 12s00r00           1618 	lcall	__gptrget
   05EE F8                 1619 	mov	r0,a
                           1620 ;	genAssign
   05EF 90s01r4B           1621 	mov	dptr,#_xatoi_c_1_1
   05F2 E8                 1622 	mov	a,r0
   05F3 F0                 1623 	movx	@dptr,a
                    05F4   1624 	C$misc.c$172$1$1 ==.
                           1625 ;	../misc.c:172: return 1;
                           1626 ;	genIpop
   05F4 D0 04              1627 	pop	ar4
   05F6 D0 03              1628 	pop	ar3
   05F8 D0 02              1629 	pop	ar2
                    05FA   1630 	C$misc.c$131$1$1 ==.
                           1631 ;	../misc.c:131: c = *(++(*str));
   05FA                    1632 00105$:
                    05FA   1633 	C$misc.c$134$1$1 ==.
                           1634 ;	../misc.c:134: if (c == '0') {
                           1635 ;	genAssign
   05FA 90s01r4B           1636 	mov	dptr,#_xatoi_c_1_1
   05FD E0                 1637 	movx	a,@dptr
   05FE FD                 1638 	mov	r5,a
                           1639 ;	genCmpEq
                           1640 ;	gencjneshort
   05FF BD 30 02           1641 	cjne	r5,#0x30,00162$
   0602 80 03              1642 	sjmp	00163$
   0604                    1643 00162$:
   0604 02s07r68           1644 	ljmp	00121$
   0607                    1645 00163$:
                    0607   1646 	C$misc.c$135$1$1 ==.
                           1647 ;	../misc.c:135: c = *(++(*str));
                           1648 ;	genIpush
   0607 C0 02              1649 	push	ar2
   0609 C0 03              1650 	push	ar3
   060B C0 04              1651 	push	ar4
                           1652 ;	genAssign
   060D 90s01r44           1653 	mov	dptr,#_xatoi_str_1_1
   0610 E0                 1654 	movx	a,@dptr
   0611 FE                 1655 	mov	r6,a
   0612 A3                 1656 	inc	dptr
   0613 E0                 1657 	movx	a,@dptr
   0614 FF                 1658 	mov	r7,a
   0615 A3                 1659 	inc	dptr
   0616 E0                 1660 	movx	a,@dptr
   0617 F8                 1661 	mov	r0,a
                           1662 ;	genPointerGet
                           1663 ;	genGenPointerGet
   0618 8E 82              1664 	mov	dpl,r6
   061A 8F 83              1665 	mov	dph,r7
   061C 88 F0              1666 	mov	b,r0
   061E 12s00r00           1667 	lcall	__gptrget
   0621 F9                 1668 	mov	r1,a
   0622 A3                 1669 	inc	dptr
   0623 12s00r00           1670 	lcall	__gptrget
   0626 FA                 1671 	mov	r2,a
   0627 A3                 1672 	inc	dptr
   0628 12s00r00           1673 	lcall	__gptrget
   062B FB                 1674 	mov	r3,a
                           1675 ;	genPlus
                           1676 ;	genPlusIncr
   062C 09                 1677 	inc	r1
   062D B9 00 01           1678 	cjne	r1,#0x00,00164$
   0630 0A                 1679 	inc	r2
   0631                    1680 00164$:
                           1681 ;	genPointerSet
                           1682 ;	genGenPointerSet
   0631 8E 82              1683 	mov	dpl,r6
   0633 8F 83              1684 	mov	dph,r7
   0635 88 F0              1685 	mov	b,r0
   0637 E9                 1686 	mov	a,r1
   0638 12s00r00           1687 	lcall	__gptrput
   063B A3                 1688 	inc	dptr
   063C EA                 1689 	mov	a,r2
   063D 12s00r00           1690 	lcall	__gptrput
   0640 A3                 1691 	inc	dptr
   0641 EB                 1692 	mov	a,r3
   0642 12s00r00           1693 	lcall	__gptrput
                           1694 ;	genPointerGet
                           1695 ;	genGenPointerGet
   0645 89 82              1696 	mov	dpl,r1
   0647 8A 83              1697 	mov	dph,r2
   0649 8B F0              1698 	mov	b,r3
   064B 12s00r00           1699 	lcall	__gptrget
   064E FD                 1700 	mov	r5,a
                           1701 ;	genAssign
   064F 90s01r4B           1702 	mov	dptr,#_xatoi_c_1_1
   0652 ED                 1703 	mov	a,r5
   0653 F0                 1704 	movx	@dptr,a
                    0654   1705 	C$misc.c$136$2$3 ==.
                           1706 ;	../misc.c:136: switch (c) {
                           1707 ;	genCmpEq
                           1708 ;	gencjne
                           1709 ;	gencjneshort
   0654 BD 42 04           1710 	cjne	r5,#0x42,00165$
   0657 74 01              1711 	mov	a,#0x01
   0659 80 01              1712 	sjmp	00166$
   065B                    1713 00165$:
   065B E4                 1714 	clr	a
   065C                    1715 00166$:
                           1716 ;	genIpop
   065C D0 04              1717 	pop	ar4
   065E D0 03              1718 	pop	ar3
   0660 D0 02              1719 	pop	ar2
                           1720 ;	genIfx
                           1721 ;	genIfxJump
   0662 60 03              1722 	jz	00167$
   0664 02s06rD7           1723 	ljmp	00109$
   0667                    1724 00167$:
                           1725 ;	genCmpEq
                           1726 ;	gencjneshort
   0667 BD 58 03           1727 	cjne	r5,#0x58,00168$
   066A 02s06r7B           1728 	ljmp	00107$
   066D                    1729 00168$:
                           1730 ;	genCmpEq
                           1731 ;	gencjneshort
   066D BD 62 03           1732 	cjne	r5,#0x62,00169$
   0670 02s06rD7           1733 	ljmp	00109$
   0673                    1734 00169$:
                           1735 ;	genCmpEq
                           1736 ;	gencjneshort
   0673 BD 78 02           1737 	cjne	r5,#0x78,00170$
   0676 80 03              1738 	sjmp	00171$
   0678                    1739 00170$:
   0678 02s07r33           1740 	ljmp	00110$
   067B                    1741 00171$:
                    067B   1742 	C$misc.c$138$3$4 ==.
                           1743 ;	../misc.c:138: case 'X':
   067B                    1744 00107$:
                    067B   1745 	C$misc.c$140$1$1 ==.
                           1746 ;	../misc.c:140: r = 16; c = *(++(*str));
                           1747 ;	genIpush
   067B C0 02              1748 	push	ar2
   067D C0 03              1749 	push	ar3
   067F C0 04              1750 	push	ar4
                           1751 ;	genAssign
   0681 90s01r4C           1752 	mov	dptr,#_xatoi_r_1_1
   0684 74 10              1753 	mov	a,#0x10
   0686 F0                 1754 	movx	@dptr,a
                           1755 ;	genAssign
   0687 90s01r44           1756 	mov	dptr,#_xatoi_str_1_1
   068A E0                 1757 	movx	a,@dptr
   068B FE                 1758 	mov	r6,a
   068C A3                 1759 	inc	dptr
   068D E0                 1760 	movx	a,@dptr
   068E FF                 1761 	mov	r7,a
   068F A3                 1762 	inc	dptr
   0690 E0                 1763 	movx	a,@dptr
   0691 F8                 1764 	mov	r0,a
                           1765 ;	genPointerGet
                           1766 ;	genGenPointerGet
   0692 8E 82              1767 	mov	dpl,r6
   0694 8F 83              1768 	mov	dph,r7
   0696 88 F0              1769 	mov	b,r0
   0698 12s00r00           1770 	lcall	__gptrget
   069B F9                 1771 	mov	r1,a
   069C A3                 1772 	inc	dptr
   069D 12s00r00           1773 	lcall	__gptrget
   06A0 FA                 1774 	mov	r2,a
   06A1 A3                 1775 	inc	dptr
   06A2 12s00r00           1776 	lcall	__gptrget
   06A5 FB                 1777 	mov	r3,a
                           1778 ;	genPlus
                           1779 ;	genPlusIncr
   06A6 09                 1780 	inc	r1
   06A7 B9 00 01           1781 	cjne	r1,#0x00,00172$
   06AA 0A                 1782 	inc	r2
   06AB                    1783 00172$:
                           1784 ;	genPointerSet
                           1785 ;	genGenPointerSet
   06AB 8E 82              1786 	mov	dpl,r6
   06AD 8F 83              1787 	mov	dph,r7
   06AF 88 F0              1788 	mov	b,r0
   06B1 E9                 1789 	mov	a,r1
   06B2 12s00r00           1790 	lcall	__gptrput
   06B5 A3                 1791 	inc	dptr
   06B6 EA                 1792 	mov	a,r2
   06B7 12s00r00           1793 	lcall	__gptrput
   06BA A3                 1794 	inc	dptr
   06BB EB                 1795 	mov	a,r3
   06BC 12s00r00           1796 	lcall	__gptrput
                           1797 ;	genPointerGet
                           1798 ;	genGenPointerGet
   06BF 89 82              1799 	mov	dpl,r1
   06C1 8A 83              1800 	mov	dph,r2
   06C3 8B F0              1801 	mov	b,r3
   06C5 12s00r00           1802 	lcall	__gptrget
   06C8 F9                 1803 	mov	r1,a
                           1804 ;	genAssign
   06C9 90s01r4B           1805 	mov	dptr,#_xatoi_c_1_1
   06CC E9                 1806 	mov	a,r1
   06CD F0                 1807 	movx	@dptr,a
                    06CE   1808 	C$misc.c$141$1$1 ==.
                           1809 ;	../misc.c:141: break;
                           1810 ;	genIpop
   06CE D0 04              1811 	pop	ar4
   06D0 D0 03              1812 	pop	ar3
   06D2 D0 02              1813 	pop	ar2
   06D4 02s07r88           1814 	ljmp	00122$
                    06D7   1815 	C$misc.c$143$3$4 ==.
                           1816 ;	../misc.c:143: case 'B':
   06D7                    1817 00109$:
                    06D7   1818 	C$misc.c$145$1$1 ==.
                           1819 ;	../misc.c:145: r = 2; c = *(++(*str));
                           1820 ;	genIpush
   06D7 C0 02              1821 	push	ar2
   06D9 C0 03              1822 	push	ar3
   06DB C0 04              1823 	push	ar4
                           1824 ;	genAssign
   06DD 90s01r4C           1825 	mov	dptr,#_xatoi_r_1_1
   06E0 74 02              1826 	mov	a,#0x02
   06E2 F0                 1827 	movx	@dptr,a
                           1828 ;	genAssign
   06E3 90s01r44           1829 	mov	dptr,#_xatoi_str_1_1
   06E6 E0                 1830 	movx	a,@dptr
   06E7 FE                 1831 	mov	r6,a
   06E8 A3                 1832 	inc	dptr
   06E9 E0                 1833 	movx	a,@dptr
   06EA FF                 1834 	mov	r7,a
   06EB A3                 1835 	inc	dptr
   06EC E0                 1836 	movx	a,@dptr
   06ED F8                 1837 	mov	r0,a
                           1838 ;	genPointerGet
                           1839 ;	genGenPointerGet
   06EE 8E 82              1840 	mov	dpl,r6
   06F0 8F 83              1841 	mov	dph,r7
   06F2 88 F0              1842 	mov	b,r0
   06F4 12s00r00           1843 	lcall	__gptrget
   06F7 F9                 1844 	mov	r1,a
   06F8 A3                 1845 	inc	dptr
   06F9 12s00r00           1846 	lcall	__gptrget
   06FC FA                 1847 	mov	r2,a
   06FD A3                 1848 	inc	dptr
   06FE 12s00r00           1849 	lcall	__gptrget
   0701 FB                 1850 	mov	r3,a
                           1851 ;	genPlus
                           1852 ;	genPlusIncr
   0702 09                 1853 	inc	r1
   0703 B9 00 01           1854 	cjne	r1,#0x00,00173$
   0706 0A                 1855 	inc	r2
   0707                    1856 00173$:
                           1857 ;	genPointerSet
                           1858 ;	genGenPointerSet
   0707 8E 82              1859 	mov	dpl,r6
   0709 8F 83              1860 	mov	dph,r7
   070B 88 F0              1861 	mov	b,r0
   070D E9                 1862 	mov	a,r1
   070E 12s00r00           1863 	lcall	__gptrput
   0711 A3                 1864 	inc	dptr
   0712 EA                 1865 	mov	a,r2
   0713 12s00r00           1866 	lcall	__gptrput
   0716 A3                 1867 	inc	dptr
   0717 EB                 1868 	mov	a,r3
   0718 12s00r00           1869 	lcall	__gptrput
                           1870 ;	genPointerGet
                           1871 ;	genGenPointerGet
   071B 89 82              1872 	mov	dpl,r1
   071D 8A 83              1873 	mov	dph,r2
   071F 8B F0              1874 	mov	b,r3
   0721 12s00r00           1875 	lcall	__gptrget
   0724 F9                 1876 	mov	r1,a
                           1877 ;	genAssign
   0725 90s01r4B           1878 	mov	dptr,#_xatoi_c_1_1
   0728 E9                 1879 	mov	a,r1
   0729 F0                 1880 	movx	@dptr,a
                    072A   1881 	C$misc.c$146$1$1 ==.
                           1882 ;	../misc.c:146: break;
                           1883 ;	genIpop
   072A D0 04              1884 	pop	ar4
   072C D0 03              1885 	pop	ar3
   072E D0 02              1886 	pop	ar2
   0730 02s07r88           1887 	ljmp	00122$
                    0733   1888 	C$misc.c$147$3$4 ==.
                           1889 ;	../misc.c:147: default:
   0733                    1890 00110$:
                    0733   1891 	C$misc.c$148$3$4 ==.
                           1892 ;	../misc.c:148: if (c <= ' ') return 1;          /* single zero */
                           1893 ;	genCmpGt
                           1894 ;	genCmp
   0733 C3                 1895 	clr	c
   0734 74 20              1896 	mov	a,#0x20
   0736 9D                 1897 	subb	a,r5
                           1898 ;	genIfxJump
   0737 50 03              1899 	jnc	00174$
   0739 02s07r45           1900 	ljmp	00112$
   073C                    1901 00174$:
                           1902 ;	genRet
   073C 75 82 01           1903 	mov	dpl,#0x01
   073F 75 83 00           1904 	mov	dph,#0x00
   0742 02s08rFB           1905 	ljmp	00136$
   0745                    1906 00112$:
                    0745   1907 	C$misc.c$149$3$4 ==.
                           1908 ;	../misc.c:149: if (c < '0' || c > '9') return 0;          /* invalid char */
                           1909 ;	genCmpLt
                           1910 ;	genCmp
   0745 BD 30 00           1911 	cjne	r5,#0x30,00175$
   0748                    1912 00175$:
                           1913 ;	genIfxJump
   0748 50 03              1914 	jnc	00176$
   074A 02s07r56           1915 	ljmp	00113$
   074D                    1916 00176$:
                           1917 ;	genCmpGt
                           1918 ;	genCmp
   074D C3                 1919 	clr	c
   074E 74 39              1920 	mov	a,#0x39
   0750 9D                 1921 	subb	a,r5
                           1922 ;	genIfxJump
   0751 40 03              1923 	jc	00177$
   0753 02s07r5F           1924 	ljmp	00114$
   0756                    1925 00177$:
   0756                    1926 00113$:
                           1927 ;	genRet
   0756 75 82 00           1928 	mov	dpl,#0x00
   0759 75 83 00           1929 	mov	dph,#0x00
   075C 02s08rFB           1930 	ljmp	00136$
   075F                    1931 00114$:
                    075F   1932 	C$misc.c$150$3$4 ==.
                           1933 ;	../misc.c:150: r = 8;                      /* octal */
                           1934 ;	genAssign
   075F 90s01r4C           1935 	mov	dptr,#_xatoi_r_1_1
   0762 74 08              1936 	mov	a,#0x08
   0764 F0                 1937 	movx	@dptr,a
                    0765   1938 	C$misc.c$151$1$1 ==.
                           1939 ;	../misc.c:151: }
   0765 02s07r88           1940 	ljmp	00122$
   0768                    1941 00121$:
                    0768   1942 	C$misc.c$153$2$5 ==.
                           1943 ;	../misc.c:153: if (c < '0' || c > '9') return 0;          /* EOL or invalid char */
                           1944 ;	genCmpLt
                           1945 ;	genCmp
   0768 BD 30 00           1946 	cjne	r5,#0x30,00178$
   076B                    1947 00178$:
                           1948 ;	genIfxJump
   076B 50 03              1949 	jnc	00179$
   076D 02s07r79           1950 	ljmp	00117$
   0770                    1951 00179$:
                           1952 ;	genCmpGt
                           1953 ;	genCmp
   0770 C3                 1954 	clr	c
   0771 74 39              1955 	mov	a,#0x39
   0773 9D                 1956 	subb	a,r5
                           1957 ;	genIfxJump
   0774 40 03              1958 	jc	00180$
   0776 02s07r82           1959 	ljmp	00118$
   0779                    1960 00180$:
   0779                    1961 00117$:
                           1962 ;	genRet
   0779 75 82 00           1963 	mov	dpl,#0x00
   077C 75 83 00           1964 	mov	dph,#0x00
   077F 02s08rFB           1965 	ljmp	00136$
   0782                    1966 00118$:
                    0782   1967 	C$misc.c$154$2$5 ==.
                           1968 ;	../misc.c:154: r = 10;                                    /* decimal */
                           1969 ;	genAssign
   0782 90s01r4C           1970 	mov	dptr,#_xatoi_r_1_1
   0785 74 0A              1971 	mov	a,#0x0A
   0787 F0                 1972 	movx	@dptr,a
   0788                    1973 00122$:
                    0788   1974 	C$misc.c$157$1$1 ==.
                           1975 ;	../misc.c:157: val = 0;
                           1976 ;	genAssign
   0788 90s01r47           1977 	mov	dptr,#_xatoi_val_1_1
   078B E4                 1978 	clr	a
   078C F0                 1979 	movx	@dptr,a
   078D A3                 1980 	inc	dptr
   078E F0                 1981 	movx	@dptr,a
   078F A3                 1982 	inc	dptr
   0790 F0                 1983 	movx	@dptr,a
   0791 A3                 1984 	inc	dptr
   0792 F0                 1985 	movx	@dptr,a
                    0793   1986 	C$misc.c$158$1$1 ==.
                           1987 ;	../misc.c:158: while (c > ' ') {
   0793                    1988 00131$:
                           1989 ;	genAssign
   0793 90s01r4B           1990 	mov	dptr,#_xatoi_c_1_1
   0796 E0                 1991 	movx	a,@dptr
   0797 FD                 1992 	mov	r5,a
                           1993 ;	genCmpGt
                           1994 ;	genCmp
   0798 C3                 1995 	clr	c
   0799 74 20              1996 	mov	a,#0x20
   079B 9D                 1997 	subb	a,r5
                           1998 ;	genIfxJump
   079C 40 03              1999 	jc	00181$
   079E 02s08rAC           2000 	ljmp	00133$
   07A1                    2001 00181$:
                    07A1   2002 	C$misc.c$159$2$6 ==.
                           2003 ;	../misc.c:159: if (c >= 'a') c -= 0x20;
                           2004 ;	genCmpLt
                           2005 ;	genCmp
   07A1 BD 61 00           2006 	cjne	r5,#0x61,00182$
   07A4                    2007 00182$:
                           2008 ;	genIfxJump
   07A4 50 03              2009 	jnc	00183$
   07A6 02s07rB0           2010 	ljmp	00124$
   07A9                    2011 00183$:
                           2012 ;	genMinus
   07A9 ED                 2013 	mov	a,r5
   07AA 24 E0              2014 	add	a,#0xe0
                           2015 ;	genAssign
   07AC 90s01r4B           2016 	mov	dptr,#_xatoi_c_1_1
   07AF F0                 2017 	movx	@dptr,a
   07B0                    2018 00124$:
                    07B0   2019 	C$misc.c$160$2$6 ==.
                           2020 ;	../misc.c:160: c -= '0';
                           2021 ;	genAssign
   07B0 90s01r4B           2022 	mov	dptr,#_xatoi_c_1_1
   07B3 E0                 2023 	movx	a,@dptr
   07B4 FD                 2024 	mov	r5,a
                           2025 ;	genMinus
   07B5 ED                 2026 	mov	a,r5
   07B6 24 D0              2027 	add	a,#0xd0
                           2028 ;	genAssign
   07B8 90s01r4B           2029 	mov	dptr,#_xatoi_c_1_1
   07BB F0                 2030 	movx	@dptr,a
                    07BC   2031 	C$misc.c$161$2$6 ==.
                           2032 ;	../misc.c:161: if (c >= 17) {
                           2033 ;	genAssign
   07BC 90s01r4B           2034 	mov	dptr,#_xatoi_c_1_1
   07BF E0                 2035 	movx	a,@dptr
   07C0 FD                 2036 	mov	r5,a
                           2037 ;	genCmpLt
                           2038 ;	genCmp
   07C1 BD 11 00           2039 	cjne	r5,#0x11,00184$
   07C4                    2040 00184$:
                           2041 ;	genIfxJump
   07C4 50 03              2042 	jnc	00185$
   07C6 02s07rE7           2043 	ljmp	00128$
   07C9                    2044 00185$:
                    07C9   2045 	C$misc.c$162$3$7 ==.
                           2046 ;	../misc.c:162: c -= 7;
                           2047 ;	genMinus
   07C9 ED                 2048 	mov	a,r5
   07CA 24 F9              2049 	add	a,#0xf9
                           2050 ;	genAssign
   07CC 90s01r4B           2051 	mov	dptr,#_xatoi_c_1_1
   07CF F0                 2052 	movx	@dptr,a
                    07D0   2053 	C$misc.c$163$3$7 ==.
                           2054 ;	../misc.c:163: if (c <= 9) return 0;           /* invalid char */
                           2055 ;	genAssign
   07D0 90s01r4B           2056 	mov	dptr,#_xatoi_c_1_1
   07D3 E0                 2057 	movx	a,@dptr
   07D4 FD                 2058 	mov	r5,a
                           2059 ;	genCmpGt
                           2060 ;	genCmp
   07D5 C3                 2061 	clr	c
   07D6 74 09              2062 	mov	a,#0x09
   07D8 9D                 2063 	subb	a,r5
                           2064 ;	genIfxJump
   07D9 50 03              2065 	jnc	00186$
   07DB 02s07rE7           2066 	ljmp	00128$
   07DE                    2067 00186$:
                           2068 ;	genRet
   07DE 75 82 00           2069 	mov	dpl,#0x00
   07E1 75 83 00           2070 	mov	dph,#0x00
   07E4 02s08rFB           2071 	ljmp	00136$
   07E7                    2072 00128$:
                    07E7   2073 	C$misc.c$165$2$6 ==.
                           2074 ;	../misc.c:165: if (c >= r) return 0;                           /* invalid char for current radix */
                           2075 ;	genAssign
   07E7 90s01r4B           2076 	mov	dptr,#_xatoi_c_1_1
   07EA E0                 2077 	movx	a,@dptr
   07EB FD                 2078 	mov	r5,a
                           2079 ;	genAssign
   07EC 90s01r4C           2080 	mov	dptr,#_xatoi_r_1_1
   07EF E0                 2081 	movx	a,@dptr
   07F0 FE                 2082 	mov	r6,a
                           2083 ;	genCmpLt
                           2084 ;	genCmp
   07F1 C3                 2085 	clr	c
   07F2 ED                 2086 	mov	a,r5
   07F3 9E                 2087 	subb	a,r6
                           2088 ;	genIfxJump
   07F4 50 03              2089 	jnc	00187$
   07F6 02s08r02           2090 	ljmp	00130$
   07F9                    2091 00187$:
                           2092 ;	genRet
   07F9 75 82 00           2093 	mov	dpl,#0x00
   07FC 75 83 00           2094 	mov	dph,#0x00
   07FF 02s08rFB           2095 	ljmp	00136$
   0802                    2096 00130$:
                    0802   2097 	C$misc.c$166$1$1 ==.
                           2098 ;	../misc.c:166: val = val * r + c;
                           2099 ;	genIpush
   0802 C0 02              2100 	push	ar2
   0804 C0 03              2101 	push	ar3
   0806 C0 04              2102 	push	ar4
                           2103 ;	genAssign
   0808 90s01r47           2104 	mov	dptr,#_xatoi_val_1_1
   080B E0                 2105 	movx	a,@dptr
   080C FF                 2106 	mov	r7,a
   080D A3                 2107 	inc	dptr
   080E E0                 2108 	movx	a,@dptr
   080F F8                 2109 	mov	r0,a
   0810 A3                 2110 	inc	dptr
   0811 E0                 2111 	movx	a,@dptr
   0812 F9                 2112 	mov	r1,a
   0813 A3                 2113 	inc	dptr
   0814 E0                 2114 	movx	a,@dptr
   0815 FA                 2115 	mov	r2,a
                           2116 ;	genCast
   0816 90s00r00           2117 	mov	dptr,#__mullong_PARM_2
   0819 EE                 2118 	mov	a,r6
   081A F0                 2119 	movx	@dptr,a
   081B A3                 2120 	inc	dptr
   081C 74 00              2121 	mov	a,#0x00
   081E F0                 2122 	movx	@dptr,a
   081F A3                 2123 	inc	dptr
   0820 74 00              2124 	mov	a,#0x00
   0822 F0                 2125 	movx	@dptr,a
   0823 A3                 2126 	inc	dptr
   0824 74 00              2127 	mov	a,#0x00
   0826 F0                 2128 	movx	@dptr,a
                           2129 ;	genCall
   0827 8F 82              2130 	mov	dpl,r7
   0829 88 83              2131 	mov	dph,r0
   082B 89 F0              2132 	mov	b,r1
   082D EA                 2133 	mov	a,r2
   082E C0 05              2134 	push	ar5
   0830 12s00r00           2135 	lcall	__mullong
   0833 AA 82              2136 	mov	r2,dpl
   0835 AB 83              2137 	mov	r3,dph
   0837 AC F0              2138 	mov	r4,b
   0839 FE                 2139 	mov	r6,a
   083A D0 05              2140 	pop	ar5
                           2141 ;	genCast
   083C 7F 00              2142 	mov	r7,#0x00
   083E 78 00              2143 	mov	r0,#0x00
   0840 79 00              2144 	mov	r1,#0x00
                           2145 ;	genPlus
   0842 90s01r47           2146 	mov	dptr,#_xatoi_val_1_1
   0845 E5 05              2147 	mov	a,ar5
   0847 25 02              2148 	add	a,ar2
   0849 F0                 2149 	movx	@dptr,a
   084A E5 07              2150 	mov	a,ar7
   084C 35 03              2151 	addc	a,ar3
   084E A3                 2152 	inc	dptr
   084F F0                 2153 	movx	@dptr,a
   0850 E5 00              2154 	mov	a,ar0
   0852 35 04              2155 	addc	a,ar4
   0854 A3                 2156 	inc	dptr
   0855 F0                 2157 	movx	@dptr,a
   0856 E5 01              2158 	mov	a,ar1
   0858 35 06              2159 	addc	a,ar6
   085A A3                 2160 	inc	dptr
   085B F0                 2161 	movx	@dptr,a
                    085C   2162 	C$misc.c$167$2$6 ==.
                           2163 ;	../misc.c:167: c = *(++(*str));
                           2164 ;	genAssign
   085C 90s01r44           2165 	mov	dptr,#_xatoi_str_1_1
   085F E0                 2166 	movx	a,@dptr
   0860 FA                 2167 	mov	r2,a
   0861 A3                 2168 	inc	dptr
   0862 E0                 2169 	movx	a,@dptr
   0863 FB                 2170 	mov	r3,a
   0864 A3                 2171 	inc	dptr
   0865 E0                 2172 	movx	a,@dptr
   0866 FC                 2173 	mov	r4,a
                           2174 ;	genPointerGet
                           2175 ;	genGenPointerGet
   0867 8A 82              2176 	mov	dpl,r2
   0869 8B 83              2177 	mov	dph,r3
   086B 8C F0              2178 	mov	b,r4
   086D 12s00r00           2179 	lcall	__gptrget
   0870 FD                 2180 	mov	r5,a
   0871 A3                 2181 	inc	dptr
   0872 12s00r00           2182 	lcall	__gptrget
   0875 FE                 2183 	mov	r6,a
   0876 A3                 2184 	inc	dptr
   0877 12s00r00           2185 	lcall	__gptrget
   087A FF                 2186 	mov	r7,a
                           2187 ;	genPlus
                           2188 ;	genPlusIncr
   087B 0D                 2189 	inc	r5
   087C BD 00 01           2190 	cjne	r5,#0x00,00188$
   087F 0E                 2191 	inc	r6
   0880                    2192 00188$:
                           2193 ;	genPointerSet
                           2194 ;	genGenPointerSet
   0880 8A 82              2195 	mov	dpl,r2
   0882 8B 83              2196 	mov	dph,r3
   0884 8C F0              2197 	mov	b,r4
   0886 ED                 2198 	mov	a,r5
   0887 12s00r00           2199 	lcall	__gptrput
   088A A3                 2200 	inc	dptr
   088B EE                 2201 	mov	a,r6
   088C 12s00r00           2202 	lcall	__gptrput
   088F A3                 2203 	inc	dptr
   0890 EF                 2204 	mov	a,r7
   0891 12s00r00           2205 	lcall	__gptrput
                           2206 ;	genPointerGet
                           2207 ;	genGenPointerGet
   0894 8D 82              2208 	mov	dpl,r5
   0896 8E 83              2209 	mov	dph,r6
   0898 8F F0              2210 	mov	b,r7
   089A 12s00r00           2211 	lcall	__gptrget
   089D FD                 2212 	mov	r5,a
                           2213 ;	genAssign
   089E 90s01r4B           2214 	mov	dptr,#_xatoi_c_1_1
   08A1 ED                 2215 	mov	a,r5
   08A2 F0                 2216 	movx	@dptr,a
                           2217 ;	genIpop
   08A3 D0 04              2218 	pop	ar4
   08A5 D0 03              2219 	pop	ar3
   08A7 D0 02              2220 	pop	ar2
   08A9 02s07r93           2221 	ljmp	00131$
   08AC                    2222 00133$:
                    08AC   2223 	C$misc.c$169$1$1 ==.
                           2224 ;	../misc.c:169: if (s) val = 0 - val;                                               /* apply sign if needed */
                           2225 ;	genAssign
   08AC 90s01r4D           2226 	mov	dptr,#_xatoi_s_1_1
   08AF E0                 2227 	movx	a,@dptr
   08B0 FD                 2228 	mov	r5,a
                           2229 ;	genIfx
   08B1 ED                 2230 	mov	a,r5
                           2231 ;	genIfxJump
   08B2 70 03              2232 	jnz	00189$
   08B4 02s08rD8           2233 	ljmp	00135$
   08B7                    2234 00189$:
                           2235 ;	genAssign
   08B7 90s01r47           2236 	mov	dptr,#_xatoi_val_1_1
   08BA E0                 2237 	movx	a,@dptr
   08BB FD                 2238 	mov	r5,a
   08BC A3                 2239 	inc	dptr
   08BD E0                 2240 	movx	a,@dptr
   08BE FE                 2241 	mov	r6,a
   08BF A3                 2242 	inc	dptr
   08C0 E0                 2243 	movx	a,@dptr
   08C1 FF                 2244 	mov	r7,a
   08C2 A3                 2245 	inc	dptr
   08C3 E0                 2246 	movx	a,@dptr
   08C4 F8                 2247 	mov	r0,a
                           2248 ;	genUminus
   08C5 90s01r47           2249 	mov	dptr,#_xatoi_val_1_1
   08C8 C3                 2250 	clr	c
   08C9 E4                 2251 	clr	a
   08CA 9D                 2252 	subb	a,r5
   08CB F0                 2253 	movx	@dptr,a
   08CC E4                 2254 	clr	a
   08CD 9E                 2255 	subb	a,r6
   08CE A3                 2256 	inc	dptr
   08CF F0                 2257 	movx	@dptr,a
   08D0 E4                 2258 	clr	a
   08D1 9F                 2259 	subb	a,r7
   08D2 A3                 2260 	inc	dptr
   08D3 F0                 2261 	movx	@dptr,a
   08D4 E4                 2262 	clr	a
   08D5 98                 2263 	subb	a,r0
   08D6 A3                 2264 	inc	dptr
   08D7 F0                 2265 	movx	@dptr,a
   08D8                    2266 00135$:
                    08D8   2267 	C$misc.c$171$1$1 ==.
                           2268 ;	../misc.c:171: *res = val;
                           2269 ;	genAssign
   08D8 90s01r47           2270 	mov	dptr,#_xatoi_val_1_1
   08DB E0                 2271 	movx	a,@dptr
   08DC FD                 2272 	mov	r5,a
   08DD A3                 2273 	inc	dptr
   08DE E0                 2274 	movx	a,@dptr
   08DF FE                 2275 	mov	r6,a
   08E0 A3                 2276 	inc	dptr
   08E1 E0                 2277 	movx	a,@dptr
   08E2 FF                 2278 	mov	r7,a
   08E3 A3                 2279 	inc	dptr
   08E4 E0                 2280 	movx	a,@dptr
   08E5 F8                 2281 	mov	r0,a
                           2282 ;	genCast
                           2283 ;	genPointerSet
                           2284 ;	genGenPointerSet
   08E6 8A 82              2285 	mov	dpl,r2
   08E8 8B 83              2286 	mov	dph,r3
   08EA 8C F0              2287 	mov	b,r4
   08EC ED                 2288 	mov	a,r5
   08ED 12s00r00           2289 	lcall	__gptrput
   08F0 A3                 2290 	inc	dptr
   08F1 EE                 2291 	mov	a,r6
   08F2 12s00r00           2292 	lcall	__gptrput
                    08F5   2293 	C$misc.c$172$1$1 ==.
                           2294 ;	../misc.c:172: return 1;
                           2295 ;	genRet
   08F5 75 82 01           2296 	mov	dpl,#0x01
   08F8 75 83 00           2297 	mov	dph,#0x00
   08FB                    2298 00136$:
                    08FB   2299 	C$misc.c$173$1$1 ==.
                    08FB   2300 	XG$xatoi$0$0 ==.
   08FB 22                 2301 	ret
                           2302 ;------------------------------------------------------------
                           2303 ;Allocation info for local variables in function 'getParity'
                           2304 ;------------------------------------------------------------
                           2305 ;n                         Allocated with name '_getParity_n_1_1'
                           2306 ;parity                    Allocated with name '_getParity_parity_1_1'
                           2307 ;------------------------------------------------------------
                    08FC   2308 	G$getParity$0$0 ==.
                    08FC   2309 	C$misc.c$176$1$1 ==.
                           2310 ;	../misc.c:176: uint8_t  getParity(unsigned int n)
                           2311 ;	-----------------------------------------
                           2312 ;	 function getParity
                           2313 ;	-----------------------------------------
   08FC                    2314 _getParity:
                           2315 ;	genReceive
   08FC AA 83              2316 	mov	r2,dph
   08FE E5 82              2317 	mov	a,dpl
   0900 90s01r4E           2318 	mov	dptr,#_getParity_n_1_1
   0903 F0                 2319 	movx	@dptr,a
   0904 A3                 2320 	inc	dptr
   0905 EA                 2321 	mov	a,r2
   0906 F0                 2322 	movx	@dptr,a
                    0907   2323 	C$misc.c$178$1$1 ==.
                           2324 ;	../misc.c:178: uint8_t parity = 0;
                           2325 ;	genAssign
   0907 90s01r50           2326 	mov	dptr,#_getParity_parity_1_1
   090A 74 00              2327 	mov	a,#0x00
   090C F0                 2328 	movx	@dptr,a
                    090D   2329 	C$misc.c$179$1$1 ==.
                           2330 ;	../misc.c:179: while (n)
   090D                    2331 00101$:
                           2332 ;	genAssign
   090D 90s01r4E           2333 	mov	dptr,#_getParity_n_1_1
   0910 E0                 2334 	movx	a,@dptr
   0911 FA                 2335 	mov	r2,a
   0912 A3                 2336 	inc	dptr
   0913 E0                 2337 	movx	a,@dptr
   0914 FB                 2338 	mov	r3,a
                           2339 ;	genIfx
   0915 EA                 2340 	mov	a,r2
   0916 4B                 2341 	orl	a,r3
                           2342 ;	genIfxJump
   0917 70 03              2343 	jnz	00108$
   0919 02s09r40           2344 	ljmp	00103$
   091C                    2345 00108$:
                    091C   2346 	C$misc.c$181$2$2 ==.
                           2347 ;	../misc.c:181: parity = !parity;
                           2348 ;	genAssign
   091C 90s01r50           2349 	mov	dptr,#_getParity_parity_1_1
   091F E0                 2350 	movx	a,@dptr
   0920 FC                 2351 	mov	r4,a
                           2352 ;	genNot
   0921 90s01r50           2353 	mov	dptr,#_getParity_parity_1_1
   0924 EC                 2354 	mov	a,r4
   0925 B4 01 00           2355 	cjne	a,#0x01,00109$
   0928                    2356 00109$:
   0928 E4                 2357 	clr	a
   0929 33                 2358 	rlc	a
   092A F0                 2359 	movx	@dptr,a
                    092B   2360 	C$misc.c$182$2$2 ==.
                           2361 ;	../misc.c:182: n      = n & (n - 1);
                           2362 ;	genMinus
                           2363 ;	genMinusDec
   092B EA                 2364 	mov	a,r2
   092C 24 FF              2365 	add	a,#0xff
   092E FC                 2366 	mov	r4,a
   092F EB                 2367 	mov	a,r3
   0930 34 FF              2368 	addc	a,#0xff
   0932 FD                 2369 	mov	r5,a
                           2370 ;	genAnd
   0933 90s01r4E           2371 	mov	dptr,#_getParity_n_1_1
   0936 EC                 2372 	mov	a,r4
   0937 5A                 2373 	anl	a,r2
   0938 F0                 2374 	movx	@dptr,a
   0939 ED                 2375 	mov	a,r5
   093A 5B                 2376 	anl	a,r3
   093B A3                 2377 	inc	dptr
   093C F0                 2378 	movx	@dptr,a
   093D 02s09r0D           2379 	ljmp	00101$
   0940                    2380 00103$:
                    0940   2381 	C$misc.c$184$1$1 ==.
                           2382 ;	../misc.c:184: return parity;
                           2383 ;	genAssign
   0940 90s01r50           2384 	mov	dptr,#_getParity_parity_1_1
   0943 E0                 2385 	movx	a,@dptr
   0944 FA                 2386 	mov	r2,a
                           2387 ;	genRet
   0945 8A 82              2388 	mov	dpl,r2
   0947                    2389 00104$:
                    0947   2390 	C$misc.c$185$1$1 ==.
                    0947   2391 	XG$getParity$0$0 ==.
   0947 22                 2392 	ret
                           2393 	.area CSEG    (CODE)
                           2394 	.area CONST   (CODE)
                    0000   2395 F___misc$_str_0$0$0 == .
   0000                    2396 __str_0:
   0000 20                 2397 	.ascii " "
   0001 00                 2398 	.db 0x00
                           2399 	.area XINIT   (CODE)
                           2400 	.area CABS    (ABS,CODE)
